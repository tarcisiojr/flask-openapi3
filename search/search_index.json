{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Changelog/","text":"v1.0.1 2022-02-12 \u2693\ufe0e add operation_id for OpenAPI Specification v1.0.0 2022-01-11 \u2693\ufe0e #10 Fix: header's title case. Thinks @rrr34 #9 Support for extra responses. Thinks @blynn99 #12 Support for path operation field deprecated. Thinks @blynn99 Add keyword parameters summary and description Add servers for OpenAPI Upgrade swagger UI v4.1.3 Upgrade Redoc v2.0.0-rc.59 Add rapidoc Breaking Changes \u2693\ufe0e Renamed securitySchemes to security_schemes Renamed docExpansion to doc_expansion v0.9.9 2021-12-09 \u2693\ufe0e fix: default value in query and form model fix: empty form and body support from __future__ import annotations drop python36 v0.9.8 2021-11-12 \u2693\ufe0e add Configuration docExpansion query and form add array support v0.9.7 2021-08-19 \u2693\ufe0e fix: path $ref fix: markdown enum v0.9.6 2021-08-18 \u2693\ufe0e Export to markdown(Experimental) v0.9.5 2021-07-11 \u2693\ufe0e remove validate_resp and add VALIDATE_RESPONSE v0.9.4 2021-07-03 \u2693\ufe0e OpenAPI add responses and APIBlueprint add abp_responses fix: validate response error when responses is empty dict #3 endpoint and APIBlueprint add doc_ui . Thinks @DerManoMann #4 fix: response description. Thinks @DerManoMann #5 add custom parameter oauth_config . Thinks @DerManoMann #6 support validation Flask Response. Thinks @DerManoMann #7 fix: response validation does not work when uses http.HTTPStatus enums as status_code. Thinks @DerManoMann v0.9.3 2021-06-08 \u2693\ufe0e APIBlueprint add abp_tags and abp_security fix: tags de-duplication fix: operation summary and description v0.9.2 2021-05-17 \u2693\ufe0e fix: _do_decorator add doc_ui args. support close swagger UI and redoc v0.9.1 2021-05-16 \u2693\ufe0e fix\uff1arequest data is None json\u2192body set 422 Content-Type application/json raise response validate exception fix: TypeError: issubclass() arg 1 must be a class v0.9.0 2021-05-13 \u2693\ufe0e first version","title":"Changelog"},{"location":"Changelog/#v101-2022-02-12","text":"add operation_id for OpenAPI Specification","title":"v1.0.1 2022-02-12"},{"location":"Changelog/#v100-2022-01-11","text":"#10 Fix: header's title case. Thinks @rrr34 #9 Support for extra responses. Thinks @blynn99 #12 Support for path operation field deprecated. Thinks @blynn99 Add keyword parameters summary and description Add servers for OpenAPI Upgrade swagger UI v4.1.3 Upgrade Redoc v2.0.0-rc.59 Add rapidoc","title":"v1.0.0 2022-01-11"},{"location":"Changelog/#breaking-changes","text":"Renamed securitySchemes to security_schemes Renamed docExpansion to doc_expansion","title":"Breaking Changes"},{"location":"Changelog/#v099-2021-12-09","text":"fix: default value in query and form model fix: empty form and body support from __future__ import annotations drop python36","title":"v0.9.9 2021-12-09"},{"location":"Changelog/#v098-2021-11-12","text":"add Configuration docExpansion query and form add array support","title":"v0.9.8 2021-11-12"},{"location":"Changelog/#v097-2021-08-19","text":"fix: path $ref fix: markdown enum","title":"v0.9.7 2021-08-19"},{"location":"Changelog/#v096-2021-08-18","text":"Export to markdown(Experimental)","title":"v0.9.6 2021-08-18"},{"location":"Changelog/#v095-2021-07-11","text":"remove validate_resp and add VALIDATE_RESPONSE","title":"v0.9.5 2021-07-11"},{"location":"Changelog/#v094-2021-07-03","text":"OpenAPI add responses and APIBlueprint add abp_responses fix: validate response error when responses is empty dict #3 endpoint and APIBlueprint add doc_ui . Thinks @DerManoMann #4 fix: response description. Thinks @DerManoMann #5 add custom parameter oauth_config . Thinks @DerManoMann #6 support validation Flask Response. Thinks @DerManoMann #7 fix: response validation does not work when uses http.HTTPStatus enums as status_code. Thinks @DerManoMann","title":"v0.9.4 2021-07-03"},{"location":"Changelog/#v093-2021-06-08","text":"APIBlueprint add abp_tags and abp_security fix: tags de-duplication fix: operation summary and description","title":"v0.9.3 2021-06-08"},{"location":"Changelog/#v092-2021-05-17","text":"fix: _do_decorator add doc_ui args. support close swagger UI and redoc","title":"v0.9.2 2021-05-17"},{"location":"Changelog/#v091-2021-05-16","text":"fix\uff1arequest data is None json\u2192body set 422 Content-Type application/json raise response validate exception fix: TypeError: issubclass() arg 1 must be a class","title":"v0.9.1 2021-05-16"},{"location":"Changelog/#v090-2021-05-13","text":"first version","title":"v0.9.0 2021-05-13"},{"location":"Example/","text":"Simple Demo \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pydantic import BaseModel from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) book_tag = Tag ( name = 'book' , description = 'Some Book' ) class BookQuery ( BaseModel ): age : int author : str @app . get ( '/book' , tags = [ book_tag ]) def get_book ( query : BookQuery ): \"\"\"get books get all books \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : query . author }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : query . author } ] } if __name__ == '__main__' : app . run ( debug = True ) REST Demo \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 from http import HTTPStatus from typing import Optional , List from pydantic import BaseModel , Field from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI from flask_openapi3.models.security import HTTPBearer , OAuth2 , OAuthFlows , OAuthFlowImplicit info = Info ( title = 'book API' , version = '1.0.0' ) jwt = HTTPBearer ( bearerFormat = \"JWT\" ) oauth2 = OAuth2 ( flows = OAuthFlows ( implicit = OAuthFlowImplicit ( authorizationUrl = \"https://example.com/api/oauth/dialog\" , scopes = { \"write:pets\" : \"modify pets in your account\" , \"read:pets\" : \"read your pets\" } ))) security_schemes = { \"jwt\" : jwt , \"oauth2\" : oauth2 } class NotFoundResponse ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Resource not found!\" , description = \"Exception Information\" ) app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes , responses = { \"404\" : NotFoundResponse }) book_tag = Tag ( name = 'book' , description = 'Some Book' ) security = [ { \"jwt\" : []}, { \"oauth2\" : [ \"write:pets\" , \"read:pets\" ]} ] app . config [ \"VALIDATE_RESPONSE\" ] = True class BookPath ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) class BookQuery ( BaseModel ): age : Optional [ int ] = Field ( None , description = 'Age' ) s_list : List [ str ] = Field ( None , alias = 's_list[]' , description = 'some array' ) class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookBodyWithID ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) age : Optional [ int ] = Field ( None , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookResponse ( BaseModel ): code : int = Field ( 0 , description = \"Status Code\" ) message : str = Field ( \"ok\" , description = \"Exception Information\" ) data : Optional [ BookBodyWithID ] @app . get ( '/book/<int:bid>' , tags = [ book_tag ], summary = 'new summary' , description = 'new description' , responses = { \"200\" : BookResponse }, extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}, security = security ) def get_book ( path : BookPath ): \"\"\"Get book Get some book by id, like: http://localhost:5000/book/3 \"\"\" if path . bid == 4 : return NotFoundResponse () . dict (), 404 return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : 3 , \"author\" : 'no' }} # set doc_ui False disable openapi UI @app . get ( '/book' , doc_ui = True , deprecated = True ) def get_books ( query : BookQuery ): \"\"\"get books get all books \"\"\" print ( query ) return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : 'a1' }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : 'a2' } ] } @app . post ( '/book' , tags = [ book_tag ], responses = { \"200\" : BookResponse }) def create_book ( body : BookBody ): print ( body ) return { \"code\" : 0 , \"message\" : \"ok\" }, HTTPStatus . OK @app . put ( '/book/<int:bid>' , tags = [ book_tag ]) def update_book ( path : BookPath , body : BookBody ): print ( path ) print ( body ) return { \"code\" : 0 , \"message\" : \"ok\" } @app . delete ( '/book/<int:bid>' , tags = [ book_tag ], doc_ui = False ) def delete_book ( path : BookPath ): print ( path ) return { \"code\" : 0 , \"message\" : \"ok\" } if __name__ == '__main__' : app . run ( debug = True ) APIBlueprint \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 from typing import Optional from pydantic import BaseModel , Field from flask_openapi3 import APIBlueprint , OpenAPI from flask_openapi3 import HTTPBearer from flask_openapi3 import Tag , Info info = Info ( title = 'book API' , version = '1.0.0' ) security_schemes = { \"jwt\" : HTTPBearer ( bearerFormat = \"JWT\" )} app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes ) tag = Tag ( name = 'book' , description = \"Some Book\" ) security = [{ \"jwt\" : []}] class Unauthorized ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Unauthorized!\" , description = \"Exception Information\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ], abp_security = security , abp_responses = { \"401\" : Unauthorized }, # disable openapi UI doc_ui = True ) class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class Path ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) @api . get ( '/book' , doc_ui = False ) def get_book (): return { \"code\" : 0 , \"message\" : \"ok\" } @api . post ( '/book' , extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}) def create_book ( body : BookBody ): assert body . age == 3 return { \"code\" : 0 , \"message\" : \"ok\" } @api . put ( '/book/<int:bid>' ) def update_book ( path : Path , body : BookBody ): assert path . bid == 1 assert body . age == 3 return { \"code\" : 0 , \"message\" : \"ok\" } # register api app . register_api ( api ) if __name__ == '__main__' : app . run ( debug = True ) Upload File Demo \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from pydantic import BaseModel , Field from flask_openapi3 import OpenAPI , FileStorage app = OpenAPI ( __name__ ) class UploadFileForm ( BaseModel ): file : FileStorage file_type : str = Field ( None , description = \"File Type\" ) @app . post ( '/upload' ) def upload_file ( form : UploadFileForm ): print ( form . file . filename ) print ( form . file_type ) form . file . save ( 'test.jpg' ) return { \"code\" : 0 , \"message\" : \"ok\" } if __name__ == '__main__' : app . run ( debug = True ) A complete project \u2693\ufe0e see flask-api-demo","title":"Example"},{"location":"Example/#simple-demo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pydantic import BaseModel from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) book_tag = Tag ( name = 'book' , description = 'Some Book' ) class BookQuery ( BaseModel ): age : int author : str @app . get ( '/book' , tags = [ book_tag ]) def get_book ( query : BookQuery ): \"\"\"get books get all books \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : query . author }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : query . author } ] } if __name__ == '__main__' : app . run ( debug = True )","title":"Simple Demo"},{"location":"Example/#rest-demo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 from http import HTTPStatus from typing import Optional , List from pydantic import BaseModel , Field from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI from flask_openapi3.models.security import HTTPBearer , OAuth2 , OAuthFlows , OAuthFlowImplicit info = Info ( title = 'book API' , version = '1.0.0' ) jwt = HTTPBearer ( bearerFormat = \"JWT\" ) oauth2 = OAuth2 ( flows = OAuthFlows ( implicit = OAuthFlowImplicit ( authorizationUrl = \"https://example.com/api/oauth/dialog\" , scopes = { \"write:pets\" : \"modify pets in your account\" , \"read:pets\" : \"read your pets\" } ))) security_schemes = { \"jwt\" : jwt , \"oauth2\" : oauth2 } class NotFoundResponse ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Resource not found!\" , description = \"Exception Information\" ) app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes , responses = { \"404\" : NotFoundResponse }) book_tag = Tag ( name = 'book' , description = 'Some Book' ) security = [ { \"jwt\" : []}, { \"oauth2\" : [ \"write:pets\" , \"read:pets\" ]} ] app . config [ \"VALIDATE_RESPONSE\" ] = True class BookPath ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) class BookQuery ( BaseModel ): age : Optional [ int ] = Field ( None , description = 'Age' ) s_list : List [ str ] = Field ( None , alias = 's_list[]' , description = 'some array' ) class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookBodyWithID ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) age : Optional [ int ] = Field ( None , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookResponse ( BaseModel ): code : int = Field ( 0 , description = \"Status Code\" ) message : str = Field ( \"ok\" , description = \"Exception Information\" ) data : Optional [ BookBodyWithID ] @app . get ( '/book/<int:bid>' , tags = [ book_tag ], summary = 'new summary' , description = 'new description' , responses = { \"200\" : BookResponse }, extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}, security = security ) def get_book ( path : BookPath ): \"\"\"Get book Get some book by id, like: http://localhost:5000/book/3 \"\"\" if path . bid == 4 : return NotFoundResponse () . dict (), 404 return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : 3 , \"author\" : 'no' }} # set doc_ui False disable openapi UI @app . get ( '/book' , doc_ui = True , deprecated = True ) def get_books ( query : BookQuery ): \"\"\"get books get all books \"\"\" print ( query ) return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : 'a1' }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : 'a2' } ] } @app . post ( '/book' , tags = [ book_tag ], responses = { \"200\" : BookResponse }) def create_book ( body : BookBody ): print ( body ) return { \"code\" : 0 , \"message\" : \"ok\" }, HTTPStatus . OK @app . put ( '/book/<int:bid>' , tags = [ book_tag ]) def update_book ( path : BookPath , body : BookBody ): print ( path ) print ( body ) return { \"code\" : 0 , \"message\" : \"ok\" } @app . delete ( '/book/<int:bid>' , tags = [ book_tag ], doc_ui = False ) def delete_book ( path : BookPath ): print ( path ) return { \"code\" : 0 , \"message\" : \"ok\" } if __name__ == '__main__' : app . run ( debug = True )","title":"REST Demo"},{"location":"Example/#apiblueprint","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 from typing import Optional from pydantic import BaseModel , Field from flask_openapi3 import APIBlueprint , OpenAPI from flask_openapi3 import HTTPBearer from flask_openapi3 import Tag , Info info = Info ( title = 'book API' , version = '1.0.0' ) security_schemes = { \"jwt\" : HTTPBearer ( bearerFormat = \"JWT\" )} app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes ) tag = Tag ( name = 'book' , description = \"Some Book\" ) security = [{ \"jwt\" : []}] class Unauthorized ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Unauthorized!\" , description = \"Exception Information\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ], abp_security = security , abp_responses = { \"401\" : Unauthorized }, # disable openapi UI doc_ui = True ) class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class Path ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) @api . get ( '/book' , doc_ui = False ) def get_book (): return { \"code\" : 0 , \"message\" : \"ok\" } @api . post ( '/book' , extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}) def create_book ( body : BookBody ): assert body . age == 3 return { \"code\" : 0 , \"message\" : \"ok\" } @api . put ( '/book/<int:bid>' ) def update_book ( path : Path , body : BookBody ): assert path . bid == 1 assert body . age == 3 return { \"code\" : 0 , \"message\" : \"ok\" } # register api app . register_api ( api ) if __name__ == '__main__' : app . run ( debug = True )","title":"APIBlueprint"},{"location":"Example/#upload-file-demo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from pydantic import BaseModel , Field from flask_openapi3 import OpenAPI , FileStorage app = OpenAPI ( __name__ ) class UploadFileForm ( BaseModel ): file : FileStorage file_type : str = Field ( None , description = \"File Type\" ) @app . post ( '/upload' ) def upload_file ( form : UploadFileForm ): print ( form . file . filename ) print ( form . file_type ) form . file . save ( 'test.jpg' ) return { \"code\" : 0 , \"message\" : \"ok\" } if __name__ == '__main__' : app . run ( debug = True )","title":"Upload File Demo"},{"location":"Example/#a-complete-project","text":"see flask-api-demo","title":"A complete project"},{"location":"LICENSE/","text":"MIT License Copyright \u00a9 2021 llc Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"Quickstart/","text":"flask_openapi3 based on Flask and Pydantic , So you can use it like Flask. A Minimal Application \u2693\ufe0e just like Flask , Create hello.py : 1 2 3 4 5 6 7 8 9 10 11 12 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) @app . route ( '/' ) def hello_world (): return 'Hello, World!' if __name__ == '__main__' : app . run () And then run it: 1 python hello.py You will see the output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 __ _ _ / _| | | | | |_| | __ _ ___| | __ | _| |/ _` / __| |/ / | | | | (_| \\__ \\ < _ _____ |_| |_|\\__,_|___/_|\\_\\ (_)|____ | ___ _ __ ___ _ __ __ _ _ __ _ / / / _ \\| '_ \\ / _ \\ '_ \\ / _` | '_ \\| | \\ \\ | (_) | |_) | __/ | | | (_| | |_) | |.___/ / \\___/| .__/ \\___|_| |_|\\__,_| .__/|_|\\____/ | | | | |_| |_| version: 1.0.1 * Serving Flask app 'just_flask' (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) RESTful API \u2693\ufe0e You can use get , post , put , patch , delete RESTful API in flask-openapi3 . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) @app . get ( '/book' ) def get_books (): return [ \"book1\" , \"book2\" ] @app . post ( '/book' ) def create_book (): return { \"message\" : \"success\" } if __name__ == '__main__' : app . run () APIBlueprint \u2693\ufe0e APIBlueprint based on Flask Blueprint , you should use app.register_api instead of app.register_blueprint . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' ) @api . post ( '/book' ) def create_book (): return { \"message\" : \"success\" } # register api app . register_api ( api ) if __name__ == '__main__' : app . run ()","title":"Quickstart"},{"location":"Quickstart/#a-minimal-application","text":"just like Flask , Create hello.py : 1 2 3 4 5 6 7 8 9 10 11 12 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) @app . route ( '/' ) def hello_world (): return 'Hello, World!' if __name__ == '__main__' : app . run () And then run it: 1 python hello.py You will see the output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 __ _ _ / _| | | | | |_| | __ _ ___| | __ | _| |/ _` / __| |/ / | | | | (_| \\__ \\ < _ _____ |_| |_|\\__,_|___/_|\\_\\ (_)|____ | ___ _ __ ___ _ __ __ _ _ __ _ / / / _ \\| '_ \\ / _ \\ '_ \\ / _` | '_ \\| | \\ \\ | (_) | |_) | __/ | | | (_| | |_) | |.___/ / \\___/| .__/ \\___|_| |_|\\__,_| .__/|_|\\____/ | | | | |_| |_| version: 1.0.1 * Serving Flask app 'just_flask' (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)","title":"A Minimal Application"},{"location":"Quickstart/#restful-api","text":"You can use get , post , put , patch , delete RESTful API in flask-openapi3 . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) @app . get ( '/book' ) def get_books (): return [ \"book1\" , \"book2\" ] @app . post ( '/book' ) def create_book (): return { \"message\" : \"success\" } if __name__ == '__main__' : app . run ()","title":"RESTful API"},{"location":"Quickstart/#apiblueprint","text":"APIBlueprint based on Flask Blueprint , you should use app.register_api instead of app.register_blueprint . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' ) @api . post ( '/book' ) def create_book (): return { \"message\" : \"success\" } # register api app . register_api ( api ) if __name__ == '__main__' : app . run ()","title":"APIBlueprint"},{"location":"","text":"Generate RESTful API and OpenAPI document for your Flask project. Requirements \u2693\ufe0e Python 3.7+ flask-openapi3 be dependent on the following libraries: Flask for the web app. Pydantic for the data validation. Installation \u2693\ufe0e 1 pip install -U flask-openapi3 A Simple Example \u2693\ufe0e Here's a simple example, further go to the Example . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pydantic import BaseModel from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) book_tag = Tag ( name = 'book' , description = 'Some Book' ) class BookQuery ( BaseModel ): age : int author : str @app . get ( '/book' , tags = [ book_tag ]) def get_book ( query : BookQuery ): \"\"\"get books get all books \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : query . author }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : query . author } ] } if __name__ == '__main__' : app . run ( debug = True ) API Document \u2693\ufe0e Run the simple example , and go to http://127.0.0.1:5000/openapi . You will see the document: Swagger UI , Redoc and RapiDoc .","title":"Home"},{"location":"#requirements","text":"Python 3.7+ flask-openapi3 be dependent on the following libraries: Flask for the web app. Pydantic for the data validation.","title":"Requirements"},{"location":"#installation","text":"1 pip install -U flask-openapi3","title":"Installation"},{"location":"#a-simple-example","text":"Here's a simple example, further go to the Example . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pydantic import BaseModel from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) book_tag = Tag ( name = 'book' , description = 'Some Book' ) class BookQuery ( BaseModel ): age : int author : str @app . get ( '/book' , tags = [ book_tag ]) def get_book ( query : BookQuery ): \"\"\"get books get all books \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : query . author }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : query . author } ] } if __name__ == '__main__' : app . run ( debug = True )","title":"A Simple Example"},{"location":"#api-document","text":"Run the simple example , and go to http://127.0.0.1:5000/openapi . You will see the document: Swagger UI , Redoc and RapiDoc .","title":"API Document"},{"location":"OpenAPI/Info/","text":"flask-openapi3 provide Swagger UI , Redoc and RapiDoc reference documentation. Before this, you should Learn something about OpenAPI spec . You must import Info from flask-openapi3 , it needs some parameters: title , version ... , more information see the OpenAPI Specification info-object . 1 2 3 4 5 6 7 8 9 from flask_openapi3 import Info from flask_openapi3 import OpenAPI , APIBlueprint info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' ) if __name__ == '__main__' : app . run () run it, and go to http://127.0.0.1:5000/openapi , you will see the documentation.","title":"Info"},{"location":"OpenAPI/OAuth/","text":"New in v0.9.4 You can pass oauth_config when initializing OpenAPI , see the demo . Here's more information about OAuth 2.0 configuration","title":"OAuth"},{"location":"OpenAPI/Request/","text":"First, you need to import BaseModel from pydantic : 1 from pydantic import BaseModel path \u2693\ufe0e Request parameter in rules\uff0c @app.get('/book/<int:bid>') . You have to declare path model as a class that inherits from BaseModel : 1 2 3 4 5 6 7 class BookPath ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : BookPath ): ... query \u2693\ufe0e Receive flask request.args . Info 1 from flask import request like path , you need pass query to view function. 1 2 3 4 5 6 7 8 class BookQuery ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : BookPath , query : BookQuery ): ... form \u2693\ufe0e Receive flask request.form and request.files . 1 2 3 4 5 6 7 8 class UploadFileForm ( BaseModel ): file : FileStorage # request.files[\"file\"] file_type : str = Field ( None , description = \"File type\" ) @app . post ( '/upload' ) def upload_file ( form : UploadFileForm ): ... body \u2693\ufe0e Receive flask request.json . 1 2 3 4 5 6 7 8 class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) @app . post ( '/book' , tags = [ book_tag ]) def create_book ( body : BookBody ): ... header \u2693\ufe0e Receive flask request.headers . cookie \u2693\ufe0e Receive flask request.cookies .","title":"Request"},{"location":"OpenAPI/Request/#path","text":"Request parameter in rules\uff0c @app.get('/book/<int:bid>') . You have to declare path model as a class that inherits from BaseModel : 1 2 3 4 5 6 7 class BookPath ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : BookPath ): ...","title":"path"},{"location":"OpenAPI/Request/#query","text":"Receive flask request.args . Info 1 from flask import request like path , you need pass query to view function. 1 2 3 4 5 6 7 8 class BookQuery ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : BookPath , query : BookQuery ): ...","title":"query"},{"location":"OpenAPI/Request/#form","text":"Receive flask request.form and request.files . 1 2 3 4 5 6 7 8 class UploadFileForm ( BaseModel ): file : FileStorage # request.files[\"file\"] file_type : str = Field ( None , description = \"File type\" ) @app . post ( '/upload' ) def upload_file ( form : UploadFileForm ): ...","title":"form"},{"location":"OpenAPI/Request/#body","text":"Receive flask request.json . 1 2 3 4 5 6 7 8 class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) @app . post ( '/book' , tags = [ book_tag ]) def create_book ( body : BookBody ): ...","title":"body"},{"location":"OpenAPI/Request/#header","text":"Receive flask request.headers .","title":"header"},{"location":"OpenAPI/Request/#cookie","text":"Receive flask request.cookies .","title":"cookie"},{"location":"OpenAPI/Response/","text":"If you want to validate response and generate Schemas , pass the responses . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class BookBodyWithID ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) age : Optional [ int ] = Field ( None , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookResponse ( BaseModel ): code : int = Field ( 0 , description = \"status code\" ) message : str = Field ( \"ok\" , description = \"exception information\" ) data : BookBodyWithID @app . get ( '/book/<int:bid>' , tags = [ book_tag ], responses = { \"200\" : BookResponse }, security = security ) def get_book ( path : BookPath , query : BookBody ): \"\"\"get book get book by id, age or author \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : query . age , \"author\" : query . author }} New in v0.9.5 By default, the VALIDATE_RESPONSE environment variable is False . You can set it True to validate responses in the development environment. Warning Please do not use it in the production environment, because it will reduce the performance. OpenAPI responses \u2693\ufe0e New in v0.9.4 You can add responses to each API under the app wrapper. 1 2 3 4 5 6 7 8 9 app = OpenAPI ( __name__ , info = info , responses = { \"404\" : NotFoundResponse } ) @app . get ( ... ) def endpoint (): ... abp_responses \u2693\ufe0e New in v0.9.4 You can add responses to each API under the api wrapper. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Unauthorized ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Unauthorized!\" , description = \"Exception Information\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_responses = { \"401\" : Unauthorized } ) @api . get ( ... ) def endpoint (): ... extra_responses \u2693\ufe0e New in v1.0.0 You can pass to your path operation decorators a parameter extra_responses . It receives a dict , the keys are status codes for each response, like 200 , and the values are other dicts with the information for each of them. Like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], responses = { \"200\" : BookResponse }, extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}, security = security ) def get_book ( path : BookPath ): ... @api . post ( '/book' , extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}) def create_book ( body : BookBody ): ... More information about OpenAPI responses \u2693\ufe0e OpenAPI Responses Object , it includes the Response Object. OpenAPI Response Object .","title":"Response"},{"location":"OpenAPI/Response/#openapi-responses","text":"New in v0.9.4 You can add responses to each API under the app wrapper. 1 2 3 4 5 6 7 8 9 app = OpenAPI ( __name__ , info = info , responses = { \"404\" : NotFoundResponse } ) @app . get ( ... ) def endpoint (): ...","title":"OpenAPI responses"},{"location":"OpenAPI/Response/#abp_responses","text":"New in v0.9.4 You can add responses to each API under the api wrapper. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Unauthorized ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Unauthorized!\" , description = \"Exception Information\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_responses = { \"401\" : Unauthorized } ) @api . get ( ... ) def endpoint (): ...","title":"abp_responses"},{"location":"OpenAPI/Response/#extra_responses","text":"New in v1.0.0 You can pass to your path operation decorators a parameter extra_responses . It receives a dict , the keys are status codes for each response, like 200 , and the values are other dicts with the information for each of them. Like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], responses = { \"200\" : BookResponse }, extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}, security = security ) def get_book ( path : BookPath ): ... @api . post ( '/book' , extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}) def create_book ( body : BookBody ): ...","title":"extra_responses"},{"location":"OpenAPI/Response/#more-information-about-openapi-responses","text":"OpenAPI Responses Object , it includes the Response Object. OpenAPI Response Object .","title":"More information about OpenAPI responses"},{"location":"OpenAPI/SecuritySchemes/","text":"like Info , import HTTPBearer from flask_openapi3 , more features see the OpenAPI Specification security-scheme-object . First, you need define the security_schemes and security variable: 1 2 3 4 security_schemes = { \"jwt\" : HTTPBearer ( bearerFormat = \"JWT\" )} security = [{ \"jwt\" : []}] app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes ) Second, add pass the security to your api, like this: 1 2 3 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : Path , query : BookBody ): ... result: abp_security \u2693\ufe0e New in v0.9.3 You don't need to specify security for every api. 1 2 3 4 5 6 7 8 tag = Tag ( name = 'book' , description = \"Some Book\" ) security = [{ \"jwt\" : []}] api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ], abp_security = security ) @api . post ( '/book' ) def create_book ( body : BookBody ): ...","title":"SecuritySchemes"},{"location":"OpenAPI/SecuritySchemes/#abp_security","text":"New in v0.9.3 You don't need to specify security for every api. 1 2 3 4 5 6 7 8 tag = Tag ( name = 'book' , description = \"Some Book\" ) security = [{ \"jwt\" : []}] api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ], abp_security = security ) @api . post ( '/book' ) def create_book ( body : BookBody ): ...","title":"abp_security"},{"location":"OpenAPI/Specification/","text":"If you need the complete spec(json) , go to http://127.0.0.1:5000/openapi/openapi.json doc_ui \u2693\ufe0e You can pass doc_ui=False to disable the OpenAPI spec when init OpenAPI . 1 app = OpenAPI ( __name__ , info = info , doc_ui = False ) New in v0.9.4 You can also use doc_ui in endpoint or when initializing APIBlueprint . 1 2 3 4 5 6 7 8 9 10 11 api = APIBlueprint ( '/book' , __name__ , doc_ui = False ) # or @api . get ( '/book' , doc_ui = False ) def get_book (): ... deprecated \u2693\ufe0e New in v1.0.0 deprecated : mark as deprecated support. Default to not True. 1 2 3 @app . get ( '/book' , deprecated = True ) def get_books ( query : BookQuery ): ... doc_expansion \u2693\ufe0e Just for swagger UI. String=[\"list\", \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). More information to see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md 1 app = OpenAPI ( __name__ , info = info , doc_expansion = 'full' ) servers \u2693\ufe0e An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /. 1 2 3 4 5 6 7 from flask_openapi3 import OpenAPI , Server servers = [ Server ( url = 'http://127.0.0.1:5000' ), Server ( url = 'https://127.0.0.1:5000' ), ] app = OpenAPI ( __name__ , info = info , servers = servers )","title":"Specification"},{"location":"OpenAPI/Specification/#doc_ui","text":"You can pass doc_ui=False to disable the OpenAPI spec when init OpenAPI . 1 app = OpenAPI ( __name__ , info = info , doc_ui = False ) New in v0.9.4 You can also use doc_ui in endpoint or when initializing APIBlueprint . 1 2 3 4 5 6 7 8 9 10 11 api = APIBlueprint ( '/book' , __name__ , doc_ui = False ) # or @api . get ( '/book' , doc_ui = False ) def get_book (): ...","title":"doc_ui"},{"location":"OpenAPI/Specification/#deprecated","text":"New in v1.0.0 deprecated : mark as deprecated support. Default to not True. 1 2 3 @app . get ( '/book' , deprecated = True ) def get_books ( query : BookQuery ): ...","title":"deprecated"},{"location":"OpenAPI/Specification/#doc_expansion","text":"Just for swagger UI. String=[\"list\", \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). More information to see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md 1 app = OpenAPI ( __name__ , info = info , doc_expansion = 'full' )","title":"doc_expansion"},{"location":"OpenAPI/Specification/#servers","text":"An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /. 1 2 3 4 5 6 7 from flask_openapi3 import OpenAPI , Server servers = [ Server ( url = 'http://127.0.0.1:5000' ), Server ( url = 'https://127.0.0.1:5000' ), ] app = OpenAPI ( __name__ , info = info , servers = servers )","title":"servers"},{"location":"OpenAPI/Summary%20and%20Description/","text":"You need add docs to the view-func. The first line is the summary, and the rest is the description. like this: 1 2 3 4 5 6 7 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], responses = { \"200\" : BookResponse }, security = security ) def get_book ( path : BookPath , query : BookBody ): \"\"\"Get book Get some book by id, like: http://localhost:5000/book/3 \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : query . age , \"author\" : query . author }} New in v1.0.0 Now keyword parameters summary and description is supported, it will be take first. 1 2 3 4 5 6 7 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], summary = \"new summary\" , description = 'new description' , responses = { \"200\" : BookResponse }, security = security ) def get_book ( path : BookPath , query : BookBody ): \"\"\"Get book Get some book by id, like: http://localhost:5000/book/3 \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : query . age , \"author\" : query . author }}","title":"Summary and Description"},{"location":"OpenAPI/Tag/","text":"You can also specify tag for apis, like this: 1 2 3 4 5 6 7 8 9 10 ... book_tag = Tag ( name = 'book' , description = 'Some Book' ) @api . get ( '/book' , tags = [ book_tag ]) def get_book (): ... and then you will get the magic. abp_tags \u2693\ufe0e New in v0.9.3 You don't need specify tag for every api. 1 2 3 4 5 6 7 8 tag = Tag ( name = 'book' , description = \"Some Book\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ]) @api . post ( '/book' ) def create_book ( body : BookBody ): ...","title":"Tag"},{"location":"OpenAPI/Tag/#abp_tags","text":"New in v0.9.3 You don't need specify tag for every api. 1 2 3 4 5 6 7 8 tag = Tag ( name = 'book' , description = \"Some Book\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ]) @api . post ( '/book' ) def create_book ( body : BookBody ): ...","title":"abp_tags"},{"location":"Reference/APIBlueprint/","text":"Source code in flask_openapi3/openapi.py class APIBlueprint ( Blueprint ): def __init__ ( self , name : str , import_name : str , * , abp_tags : Optional [ List [ Tag ]] = None , abp_security : Optional [ List [ Dict [ str , List [ str ]]]] = None , abp_responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , ** kwargs : Any ) -> None : \"\"\" Based on Flask Blueprint Arguments: name: The name of the blueprint. Will be prepended to each endpoint name. import_name: The name of the blueprint package, usually ``__name__``. This helps locate the ``root_path`` for the blueprint. abp_tags: APIBlueprint tags for every api abp_security: APIBlueprint security for every api abp_responses: APIBlueprint response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. kwargs: Flask Blueprint kwargs \"\"\" super ( APIBlueprint , self ) . __init__ ( name , import_name , ** kwargs ) self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . abp_tags = abp_tags or [] self . abp_security = abp_security or [] self . abp_responses = abp_responses or {} self . doc_ui = doc_ui def _do_decorator ( self , rule : str , func : Callable , * , tags : List [ Tag ] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Dict [ str , Type [ BaseModel ]] = None , extra_responses : Dict [ str , dict ] = None , security : List [ Dict [ str , List [ Any ]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True , method : str = HTTPMethod . GET ) -> Tuple [ Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Dict [ str , Type [ BaseModel ]] ]: \"\"\" Collect openapi specification information :param rule: flask route :param func: flask view_func :param tags: api tag :param responses: response model :param extra_responses: extra response dict :param security: security name :param doc_ui: add openapi document UI(swagger and redoc). Defaults to True. :param deprecated: mark as deprecated support. Default to not True. :param operation_id: unique string used to identify the operation. :param method: api method :return: \"\"\" if self . doc_ui is True and doc_ui is True : if responses is None : responses = {} if extra_responses is None : extra_responses = {} validate_responses_type ( responses ) validate_responses_type ( self . abp_responses ) validate_responses_type ( extra_responses ) # global response combine api responses combine_responses = deepcopy ( self . abp_responses ) combine_responses . update ( ** responses ) # create operation operation = get_operation ( func , summary = summary , description = description ) # add security if security is None : security = [] operation . security = security + self . abp_security or None # only set `deprecated` if True otherwise leave it as None if deprecated : operation . deprecated = True # Unique string used to identify the operation. if operation_id : operation . operationId = operation_id else : operation . operationId = get_operation_id_for_path ( name = func . __name__ , path = rule , method = method ) # store tags tags = tags + self . abp_tags if tags else self . abp_tags parse_and_store_tags ( tags , self . tags , self . tag_names , operation ) # parse parameters header , cookie , path , query , form , body = \\ parse_parameters ( func , components_schemas = self . components_schemas , operation = operation ) # parse response get_responses ( combine_responses , extra_responses , self . components_schemas , operation ) uri = get_openapi_path ( rule ) # merge url_prefix and uri uri = self . url_prefix . rstrip ( \"/\" ) + \"/\" + uri . lstrip ( \"/\" ) if self . url_prefix else uri # strip the right slash uri = uri . rstrip ( '/' ) # parse method parse_method ( uri , method , self . paths , operation ) return header , cookie , path , query , form , body , combine_responses else : # parse parameters header , cookie , path , query , form , body = parse_parameters ( func , doc_ui = False ) return header , cookie , path , query , form , body , {} def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator __init__ ( self , name , import_name , * , abp_tags = None , abp_security = None , abp_responses = None , doc_ui = True , ** kwargs ) special \u2693\ufe0e Based on Flask Blueprint Parameters: Name Type Description Default name str The name of the blueprint. Will be prepended to each endpoint name. required import_name str The name of the blueprint package, usually __name__ . This helps locate the root_path for the blueprint. required abp_tags Optional[List[flask_openapi3.models.tag.Tag]] APIBlueprint tags for every api None abp_security Optional[List[Dict[str, List[str]]]] APIBlueprint security for every api None abp_responses Optional[Dict[str, Type[pydantic.main.BaseModel]]] APIBlueprint response model None doc_ui bool add openapi document UI(swagger and redoc). Defaults to True. True kwargs Any Flask Blueprint kwargs {} Source code in flask_openapi3/openapi.py def __init__ ( self , name : str , import_name : str , * , abp_tags : Optional [ List [ Tag ]] = None , abp_security : Optional [ List [ Dict [ str , List [ str ]]]] = None , abp_responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , ** kwargs : Any ) -> None : \"\"\" Based on Flask Blueprint Arguments: name: The name of the blueprint. Will be prepended to each endpoint name. import_name: The name of the blueprint package, usually ``__name__``. This helps locate the ``root_path`` for the blueprint. abp_tags: APIBlueprint tags for every api abp_security: APIBlueprint security for every api abp_responses: APIBlueprint response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. kwargs: Flask Blueprint kwargs \"\"\" super ( APIBlueprint , self ) . __init__ ( name , import_name , ** kwargs ) self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . abp_tags = abp_tags or [] self . abp_security = abp_security or [] self . abp_responses = abp_responses or {} self . doc_ui = doc_ui delete ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['DELETE']) Source code in flask_openapi3/openapi.py def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator get ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['GET']) Source code in flask_openapi3/openapi.py def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator patch ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['PATCH']) Source code in flask_openapi3/openapi.py def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator post ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['POST']) Source code in flask_openapi3/openapi.py def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator put ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['PUT']) Source code in flask_openapi3/openapi.py def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"APIBlueprint"},{"location":"Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.__init__","text":"Based on Flask Blueprint Parameters: Name Type Description Default name str The name of the blueprint. Will be prepended to each endpoint name. required import_name str The name of the blueprint package, usually __name__ . This helps locate the root_path for the blueprint. required abp_tags Optional[List[flask_openapi3.models.tag.Tag]] APIBlueprint tags for every api None abp_security Optional[List[Dict[str, List[str]]]] APIBlueprint security for every api None abp_responses Optional[Dict[str, Type[pydantic.main.BaseModel]]] APIBlueprint response model None doc_ui bool add openapi document UI(swagger and redoc). Defaults to True. True kwargs Any Flask Blueprint kwargs {} Source code in flask_openapi3/openapi.py def __init__ ( self , name : str , import_name : str , * , abp_tags : Optional [ List [ Tag ]] = None , abp_security : Optional [ List [ Dict [ str , List [ str ]]]] = None , abp_responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , ** kwargs : Any ) -> None : \"\"\" Based on Flask Blueprint Arguments: name: The name of the blueprint. Will be prepended to each endpoint name. import_name: The name of the blueprint package, usually ``__name__``. This helps locate the ``root_path`` for the blueprint. abp_tags: APIBlueprint tags for every api abp_security: APIBlueprint security for every api abp_responses: APIBlueprint response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. kwargs: Flask Blueprint kwargs \"\"\" super ( APIBlueprint , self ) . __init__ ( name , import_name , ** kwargs ) self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . abp_tags = abp_tags or [] self . abp_security = abp_security or [] self . abp_responses = abp_responses or {} self . doc_ui = doc_ui","title":"__init__()"},{"location":"Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.delete","text":"Decorator for rest api, like: app.route(methods=['DELETE']) Source code in flask_openapi3/openapi.py def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"delete()"},{"location":"Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.get","text":"Decorator for rest api, like: app.route(methods=['GET']) Source code in flask_openapi3/openapi.py def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"get()"},{"location":"Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.patch","text":"Decorator for rest api, like: app.route(methods=['PATCH']) Source code in flask_openapi3/openapi.py def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"patch()"},{"location":"Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.post","text":"Decorator for rest api, like: app.route(methods=['POST']) Source code in flask_openapi3/openapi.py def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"post()"},{"location":"Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.put","text":"Decorator for rest api, like: app.route(methods=['PUT']) Source code in flask_openapi3/openapi.py def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"put()"},{"location":"Reference/OpenAPI/","text":"Source code in flask_openapi3/openapi.py class OpenAPI ( Flask ): def __init__ ( self , import_name : str , * , info : Optional [ Info ] = None , security_schemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None , oauth_config : Optional [ OAuthConfig ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , doc_expansion : str = \"list\" , doc_prefix : str = \"/openapi\" , api_doc_url : str = \"/openapi.json\" , swagger_url : str = \"/swagger\" , redoc_url : str = \"/redoc\" , rapidoc_url : str = \"/rapidoc\" , servers : Optional [ List [ Server ]] = None , ** kwargs : Any ) -> None : \"\"\" Based on Flask. Provide REST api, swagger-ui and redoc. Arguments: import_name: just flask import_name info: see https://spec.openapis.org/oas/v3.0.3#info-object security_schemes: see https://spec.openapis.org/oas/v3.0.3#security-scheme-object oauth_config: OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md responses: OpenAPI response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. doc_expansion: String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md doc_prefix: URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. api_doc_url: The OpenAPI Spec documentation. Defaults to '/openapi.json'. swagger_url: The Swagger UI documentation. Defaults to `/swagger`. redoc_url: The Redoc UI documentation. Defaults to `/redoc`. rapidoc_url: The RapiDoc UI documentation. Defaults to `/rapidoc`. servers: An array of Server Objects, which provide connectivity information to a target server. kwargs: Flask kwargs \"\"\" super ( OpenAPI , self ) . __init__ ( import_name , ** kwargs ) self . openapi_version = \"3.0.3\" if info is None : info = Info ( title = 'OpenAPI' , version = '1.0.0' ) assert isinstance ( info , Info ), f \"Info is required (got type { type ( info ) } )\" self . info = info self . security_schemes = security_schemes self . responses = responses or {} self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . doc_prefix = doc_prefix self . api_doc_url = api_doc_url self . swagger_url = swagger_url self . redoc_url = redoc_url self . rapidoc_url = rapidoc_url if oauth_config : if not isinstance ( oauth_config , OAuthConfig ): raise TypeError ( \"`initOAuth` must be `OAuthConfig`\" ) self . oauth_config = oauth_config if doc_ui : self . init_doc () self . doc_expansion = doc_expansion self . severs = servers def init_doc ( self ) -> None : \"\"\" Provide swagger-ui and redoc \"\"\" _here = os . path . dirname ( __file__ ) template_folder = os . path . join ( _here , 'templates' ) static_folder = os . path . join ( template_folder , 'static' ) blueprint = Blueprint ( 'openapi' , __name__ , url_prefix = self . doc_prefix , template_folder = template_folder , static_folder = static_folder ) blueprint . add_url_rule ( rule = self . api_doc_url , endpoint = 'api_doc' , view_func = lambda : self . api_doc ) blueprint . add_url_rule ( rule = self . swagger_url , endpoint = 'swagger' , view_func = lambda : render_template ( \"swagger.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ), doc_expansion = self . doc_expansion , oauth_config = self . oauth_config . dict () if self . oauth_config else None ) ) blueprint . add_url_rule ( rule = self . redoc_url , endpoint = 'redoc' , view_func = lambda : render_template ( \"redoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = self . rapidoc_url , endpoint = 'rapidoc' , view_func = lambda : render_template ( \"rapidoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = '/markdown' , endpoint = 'markdown' , view_func = lambda : self . export_to_markdown () ) blueprint . add_url_rule ( rule = '/' , endpoint = 'index' , view_func = lambda : render_template ( \"index.html\" , swagger_url = self . swagger_url . lstrip ( '/' ), redoc_url = self . redoc_url . lstrip ( '/' ), rapidoc_url = self . rapidoc_url . lstrip ( '/' ) ) ) self . register_blueprint ( blueprint ) def export_to_markdown ( self ) -> Response : \"\"\"Experimental\"\"\" md = StringIO () md . write ( openapi_to_markdown ( self . api_doc )) r = make_response ( md . getvalue ()) r . headers [ 'Content-Disposition' ] = 'attachment; filename=api.md' return r @property def api_doc ( self ) -> Dict : \"\"\"Generate spec json\"\"\" spec = APISpec ( openapi = self . openapi_version , info = self . info , servers = self . severs , externalDocs = ExternalDocumentation ( url = f ' { self . doc_prefix } /markdown' , description = 'Export to markdown' ) ) spec . tags = self . tags or None spec . paths = self . paths self . components . schemas = self . components_schemas self . components . securitySchemes = self . security_schemes spec . components = self . components return json . loads ( spec . json ( by_alias = True , exclude_none = True )) def register_api ( self , api : APIBlueprint ) -> None : \"\"\"Register APIBlueprint\"\"\" for tag in api . tags : if tag . name not in self . tag_names : self . tags . append ( tag ) self . paths . update ( ** api . paths ) self . components_schemas . update ( ** api . components_schemas ) self . register_blueprint ( api ) def _do_decorator ( self , rule : str , func : Callable , * , tags : List [ Tag ] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Dict [ str , Type [ BaseModel ]] = None , extra_responses : Dict [ str , dict ] = None , security : List [ Dict [ str , List [ Any ]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True , method : str = HTTPMethod . GET ) -> Tuple [ Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Dict [ str , Type [ BaseModel ]] ]: \"\"\" Collect openapi specification information :param rule: flask route :param func: flask view_func :param tags: api tag :param responses: response model :param extra_responses: extra response dict :param security: security name :param deprecated: mark as deprecated support. Default to not True. :param doc_ui: add openapi document UI(swagger and redoc). Defaults to True. :param operation_id: unique string used to identify the operation. :param method: api method :return: \"\"\" if doc_ui is True : if responses is None : responses = {} if extra_responses is None : extra_responses = {} validate_responses_type ( responses ) validate_responses_type ( self . responses ) validate_responses_type ( extra_responses ) # global response combine api responses combine_responses = deepcopy ( self . responses ) combine_responses . update ( ** responses ) # create operation operation = get_operation ( func , summary = summary , description = description ) # add security operation . security = security # only set `deprecated` if True otherwise leave it as None if deprecated : operation . deprecated = True # Unique string used to identify the operation. if operation_id : operation . operationId = operation_id else : operation . operationId = get_operation_id_for_path ( name = func . __name__ , path = rule , method = method ) # store tags parse_and_store_tags ( tags , self . tags , self . tag_names , operation ) # parse parameters header , cookie , path , query , form , body = \\ parse_parameters ( func , components_schemas = self . components_schemas , operation = operation ) # parse response get_responses ( combine_responses , extra_responses , self . components_schemas , operation ) uri = get_openapi_path ( rule ) # parse method parse_method ( uri , method , self . paths , operation ) return header , cookie , path , query , form , body , combine_responses else : # parse parameters header , cookie , path , query , form , body = parse_parameters ( func , doc_ui = False ) return header , cookie , path , query , form , body , {} def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator api_doc : Dict property readonly \u2693\ufe0e Generate spec json __init__ ( self , import_name , * , info = None , security_schemes = None , oauth_config = None , responses = None , doc_ui = True , doc_expansion = 'list' , doc_prefix = '/openapi' , api_doc_url = '/openapi.json' , swagger_url = '/swagger' , redoc_url = '/redoc' , rapidoc_url = '/rapidoc' , servers = None , ** kwargs ) special \u2693\ufe0e Based on Flask. Provide REST api, swagger-ui and redoc. Parameters: Name Type Description Default import_name str just flask import_name required info Optional[flask_openapi3.models.info.Info] see https://spec.openapis.org/oas/v3.0.3#info-object None security_schemes Optional[Dict[str, Union[flask_openapi3.models.security.APIKey, flask_openapi3.models.security.HTTPBase, flask_openapi3.models.security.OAuth2, flask_openapi3.models.security.OpenIdConnect, flask_openapi3.models.security.HTTPBearer, flask_openapi3.models.common.Reference]]] see https://spec.openapis.org/oas/v3.0.3#security-scheme-object None oauth_config Optional[flask_openapi3.models.oauth.OAuthConfig] OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md None responses Optional[Dict[str, Type[pydantic.main.BaseModel]]] OpenAPI response model None doc_ui bool add openapi document UI(swagger and redoc). Defaults to True. True doc_expansion str String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md 'list' doc_prefix str URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. '/openapi' api_doc_url str The OpenAPI Spec documentation. Defaults to '/openapi.json'. '/openapi.json' swagger_url str The Swagger UI documentation. Defaults to /swagger . '/swagger' redoc_url str The Redoc UI documentation. Defaults to /redoc . '/redoc' rapidoc_url str The RapiDoc UI documentation. Defaults to /rapidoc . '/rapidoc' servers Optional[List[flask_openapi3.models.server.Server]] An array of Server Objects, which provide connectivity information to a target server. None kwargs Any Flask kwargs {} Source code in flask_openapi3/openapi.py def __init__ ( self , import_name : str , * , info : Optional [ Info ] = None , security_schemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None , oauth_config : Optional [ OAuthConfig ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , doc_expansion : str = \"list\" , doc_prefix : str = \"/openapi\" , api_doc_url : str = \"/openapi.json\" , swagger_url : str = \"/swagger\" , redoc_url : str = \"/redoc\" , rapidoc_url : str = \"/rapidoc\" , servers : Optional [ List [ Server ]] = None , ** kwargs : Any ) -> None : \"\"\" Based on Flask. Provide REST api, swagger-ui and redoc. Arguments: import_name: just flask import_name info: see https://spec.openapis.org/oas/v3.0.3#info-object security_schemes: see https://spec.openapis.org/oas/v3.0.3#security-scheme-object oauth_config: OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md responses: OpenAPI response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. doc_expansion: String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md doc_prefix: URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. api_doc_url: The OpenAPI Spec documentation. Defaults to '/openapi.json'. swagger_url: The Swagger UI documentation. Defaults to `/swagger`. redoc_url: The Redoc UI documentation. Defaults to `/redoc`. rapidoc_url: The RapiDoc UI documentation. Defaults to `/rapidoc`. servers: An array of Server Objects, which provide connectivity information to a target server. kwargs: Flask kwargs \"\"\" super ( OpenAPI , self ) . __init__ ( import_name , ** kwargs ) self . openapi_version = \"3.0.3\" if info is None : info = Info ( title = 'OpenAPI' , version = '1.0.0' ) assert isinstance ( info , Info ), f \"Info is required (got type { type ( info ) } )\" self . info = info self . security_schemes = security_schemes self . responses = responses or {} self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . doc_prefix = doc_prefix self . api_doc_url = api_doc_url self . swagger_url = swagger_url self . redoc_url = redoc_url self . rapidoc_url = rapidoc_url if oauth_config : if not isinstance ( oauth_config , OAuthConfig ): raise TypeError ( \"`initOAuth` must be `OAuthConfig`\" ) self . oauth_config = oauth_config if doc_ui : self . init_doc () self . doc_expansion = doc_expansion self . severs = servers delete ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['DELETE']) Source code in flask_openapi3/openapi.py def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator export_to_markdown ( self ) \u2693\ufe0e Experimental Source code in flask_openapi3/openapi.py def export_to_markdown ( self ) -> Response : \"\"\"Experimental\"\"\" md = StringIO () md . write ( openapi_to_markdown ( self . api_doc )) r = make_response ( md . getvalue ()) r . headers [ 'Content-Disposition' ] = 'attachment; filename=api.md' return r get ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['GET']) Source code in flask_openapi3/openapi.py def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator init_doc ( self ) \u2693\ufe0e Provide swagger-ui and redoc Source code in flask_openapi3/openapi.py def init_doc ( self ) -> None : \"\"\" Provide swagger-ui and redoc \"\"\" _here = os . path . dirname ( __file__ ) template_folder = os . path . join ( _here , 'templates' ) static_folder = os . path . join ( template_folder , 'static' ) blueprint = Blueprint ( 'openapi' , __name__ , url_prefix = self . doc_prefix , template_folder = template_folder , static_folder = static_folder ) blueprint . add_url_rule ( rule = self . api_doc_url , endpoint = 'api_doc' , view_func = lambda : self . api_doc ) blueprint . add_url_rule ( rule = self . swagger_url , endpoint = 'swagger' , view_func = lambda : render_template ( \"swagger.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ), doc_expansion = self . doc_expansion , oauth_config = self . oauth_config . dict () if self . oauth_config else None ) ) blueprint . add_url_rule ( rule = self . redoc_url , endpoint = 'redoc' , view_func = lambda : render_template ( \"redoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = self . rapidoc_url , endpoint = 'rapidoc' , view_func = lambda : render_template ( \"rapidoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = '/markdown' , endpoint = 'markdown' , view_func = lambda : self . export_to_markdown () ) blueprint . add_url_rule ( rule = '/' , endpoint = 'index' , view_func = lambda : render_template ( \"index.html\" , swagger_url = self . swagger_url . lstrip ( '/' ), redoc_url = self . redoc_url . lstrip ( '/' ), rapidoc_url = self . rapidoc_url . lstrip ( '/' ) ) ) self . register_blueprint ( blueprint ) patch ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['PATCH']) Source code in flask_openapi3/openapi.py def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator post ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['POST']) Source code in flask_openapi3/openapi.py def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator put ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['PUT']) Source code in flask_openapi3/openapi.py def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator register_api ( self , api ) \u2693\ufe0e Register APIBlueprint Source code in flask_openapi3/openapi.py def register_api ( self , api : APIBlueprint ) -> None : \"\"\"Register APIBlueprint\"\"\" for tag in api . tags : if tag . name not in self . tag_names : self . tags . append ( tag ) self . paths . update ( ** api . paths ) self . components_schemas . update ( ** api . components_schemas ) self . register_blueprint ( api )","title":"OpenAPI"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.api_doc","text":"Generate spec json","title":"api_doc"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.__init__","text":"Based on Flask. Provide REST api, swagger-ui and redoc. Parameters: Name Type Description Default import_name str just flask import_name required info Optional[flask_openapi3.models.info.Info] see https://spec.openapis.org/oas/v3.0.3#info-object None security_schemes Optional[Dict[str, Union[flask_openapi3.models.security.APIKey, flask_openapi3.models.security.HTTPBase, flask_openapi3.models.security.OAuth2, flask_openapi3.models.security.OpenIdConnect, flask_openapi3.models.security.HTTPBearer, flask_openapi3.models.common.Reference]]] see https://spec.openapis.org/oas/v3.0.3#security-scheme-object None oauth_config Optional[flask_openapi3.models.oauth.OAuthConfig] OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md None responses Optional[Dict[str, Type[pydantic.main.BaseModel]]] OpenAPI response model None doc_ui bool add openapi document UI(swagger and redoc). Defaults to True. True doc_expansion str String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md 'list' doc_prefix str URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. '/openapi' api_doc_url str The OpenAPI Spec documentation. Defaults to '/openapi.json'. '/openapi.json' swagger_url str The Swagger UI documentation. Defaults to /swagger . '/swagger' redoc_url str The Redoc UI documentation. Defaults to /redoc . '/redoc' rapidoc_url str The RapiDoc UI documentation. Defaults to /rapidoc . '/rapidoc' servers Optional[List[flask_openapi3.models.server.Server]] An array of Server Objects, which provide connectivity information to a target server. None kwargs Any Flask kwargs {} Source code in flask_openapi3/openapi.py def __init__ ( self , import_name : str , * , info : Optional [ Info ] = None , security_schemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None , oauth_config : Optional [ OAuthConfig ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , doc_expansion : str = \"list\" , doc_prefix : str = \"/openapi\" , api_doc_url : str = \"/openapi.json\" , swagger_url : str = \"/swagger\" , redoc_url : str = \"/redoc\" , rapidoc_url : str = \"/rapidoc\" , servers : Optional [ List [ Server ]] = None , ** kwargs : Any ) -> None : \"\"\" Based on Flask. Provide REST api, swagger-ui and redoc. Arguments: import_name: just flask import_name info: see https://spec.openapis.org/oas/v3.0.3#info-object security_schemes: see https://spec.openapis.org/oas/v3.0.3#security-scheme-object oauth_config: OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md responses: OpenAPI response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. doc_expansion: String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md doc_prefix: URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. api_doc_url: The OpenAPI Spec documentation. Defaults to '/openapi.json'. swagger_url: The Swagger UI documentation. Defaults to `/swagger`. redoc_url: The Redoc UI documentation. Defaults to `/redoc`. rapidoc_url: The RapiDoc UI documentation. Defaults to `/rapidoc`. servers: An array of Server Objects, which provide connectivity information to a target server. kwargs: Flask kwargs \"\"\" super ( OpenAPI , self ) . __init__ ( import_name , ** kwargs ) self . openapi_version = \"3.0.3\" if info is None : info = Info ( title = 'OpenAPI' , version = '1.0.0' ) assert isinstance ( info , Info ), f \"Info is required (got type { type ( info ) } )\" self . info = info self . security_schemes = security_schemes self . responses = responses or {} self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . doc_prefix = doc_prefix self . api_doc_url = api_doc_url self . swagger_url = swagger_url self . redoc_url = redoc_url self . rapidoc_url = rapidoc_url if oauth_config : if not isinstance ( oauth_config , OAuthConfig ): raise TypeError ( \"`initOAuth` must be `OAuthConfig`\" ) self . oauth_config = oauth_config if doc_ui : self . init_doc () self . doc_expansion = doc_expansion self . severs = servers","title":"__init__()"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.delete","text":"Decorator for rest api, like: app.route(methods=['DELETE']) Source code in flask_openapi3/openapi.py def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"delete()"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.export_to_markdown","text":"Experimental Source code in flask_openapi3/openapi.py def export_to_markdown ( self ) -> Response : \"\"\"Experimental\"\"\" md = StringIO () md . write ( openapi_to_markdown ( self . api_doc )) r = make_response ( md . getvalue ()) r . headers [ 'Content-Disposition' ] = 'attachment; filename=api.md' return r","title":"export_to_markdown()"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.get","text":"Decorator for rest api, like: app.route(methods=['GET']) Source code in flask_openapi3/openapi.py def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"get()"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.init_doc","text":"Provide swagger-ui and redoc Source code in flask_openapi3/openapi.py def init_doc ( self ) -> None : \"\"\" Provide swagger-ui and redoc \"\"\" _here = os . path . dirname ( __file__ ) template_folder = os . path . join ( _here , 'templates' ) static_folder = os . path . join ( template_folder , 'static' ) blueprint = Blueprint ( 'openapi' , __name__ , url_prefix = self . doc_prefix , template_folder = template_folder , static_folder = static_folder ) blueprint . add_url_rule ( rule = self . api_doc_url , endpoint = 'api_doc' , view_func = lambda : self . api_doc ) blueprint . add_url_rule ( rule = self . swagger_url , endpoint = 'swagger' , view_func = lambda : render_template ( \"swagger.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ), doc_expansion = self . doc_expansion , oauth_config = self . oauth_config . dict () if self . oauth_config else None ) ) blueprint . add_url_rule ( rule = self . redoc_url , endpoint = 'redoc' , view_func = lambda : render_template ( \"redoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = self . rapidoc_url , endpoint = 'rapidoc' , view_func = lambda : render_template ( \"rapidoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = '/markdown' , endpoint = 'markdown' , view_func = lambda : self . export_to_markdown () ) blueprint . add_url_rule ( rule = '/' , endpoint = 'index' , view_func = lambda : render_template ( \"index.html\" , swagger_url = self . swagger_url . lstrip ( '/' ), redoc_url = self . redoc_url . lstrip ( '/' ), rapidoc_url = self . rapidoc_url . lstrip ( '/' ) ) ) self . register_blueprint ( blueprint )","title":"init_doc()"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.patch","text":"Decorator for rest api, like: app.route(methods=['PATCH']) Source code in flask_openapi3/openapi.py def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"patch()"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.post","text":"Decorator for rest api, like: app.route(methods=['POST']) Source code in flask_openapi3/openapi.py def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"post()"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.put","text":"Decorator for rest api, like: app.route(methods=['PUT']) Source code in flask_openapi3/openapi.py def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"put()"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.register_api","text":"Register APIBlueprint Source code in flask_openapi3/openapi.py def register_api ( self , api : APIBlueprint ) -> None : \"\"\"Register APIBlueprint\"\"\" for tag in api . tags : if tag . name not in self . tag_names : self . tags . append ( tag ) self . paths . update ( ** api . paths ) self . components_schemas . update ( ** api . components_schemas ) self . register_blueprint ( api )","title":"register_api()"},{"location":"Reference/Model/APISpec/","text":"Source code in flask_openapi3/models/__init__.py class APISpec ( BaseModel ): openapi : str info : Info servers : Optional [ List [ Server ]] = None paths : Dict [ str , PathItem ] = None components : Optional [ Components ] = None security : Optional [ List [ Dict [ str , List [ str ]]]] = None tags : Optional [ List [ Tag ]] = None externalDocs : Optional [ ExternalDocumentation ] = None components : Components pydantic-field \u2693\ufe0e externalDocs : ExternalDocumentation pydantic-field \u2693\ufe0e info : Info pydantic-field required \u2693\ufe0e openapi : str pydantic-field required \u2693\ufe0e paths : Dict [ str , flask_openapi3 . models . path . PathItem ] pydantic-field \u2693\ufe0e security : List [ Dict [ str , List [ str ]]] pydantic-field \u2693\ufe0e servers : List [ flask_openapi3 . models . server . Server ] pydantic-field \u2693\ufe0e tags : List [ flask_openapi3 . models . tag . Tag ] pydantic-field \u2693\ufe0e","title":"APISpec"},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.components","text":"","title":"components"},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.externalDocs","text":"","title":"externalDocs"},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.info","text":"","title":"info"},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.openapi","text":"","title":"openapi"},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.paths","text":"","title":"paths"},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.security","text":"","title":"security"},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.servers","text":"","title":"servers"},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.tags","text":"","title":"tags"},{"location":"Reference/Model/common/","text":"Encoding ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class Encoding ( BaseModel ): contentType : Optional [ str ] = None # headers: Optional[Dict[str, Union[\"Header\", Reference]]] = None style : Optional [ str ] = None explode : Optional [ bool ] = True allowReserved : Optional [ bool ] = None allowReserved : bool pydantic-field \u2693\ufe0e contentType : str pydantic-field \u2693\ufe0e explode : bool pydantic-field \u2693\ufe0e style : str pydantic-field \u2693\ufe0e ExternalDocumentation ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class ExternalDocumentation ( BaseModel ): url : str description : Optional [ str ] = None description : str pydantic-field \u2693\ufe0e url : str pydantic-field required \u2693\ufe0e MediaType ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class MediaType ( BaseModel ): schema_ : Optional [ Union [ Schema , Reference ]] = Field ( None , alias = \"schema\" ) encoding : Optional [ Dict [ str , Encoding ]] = None encoding : Dict [ str , flask_openapi3 . models . common . Encoding ] pydantic-field \u2693\ufe0e schema_ : Union [ flask_openapi3 . models . common . Schema , flask_openapi3 . models . common . Reference ] pydantic-field \u2693\ufe0e Reference ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class Reference ( BaseModel ): ref : str = Field ( ... , alias = \"$ref\" ) ref : str pydantic-field required \u2693\ufe0e Response ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class Response ( BaseModel ): description : Optional [ str ] content : Optional [ Dict [ str , MediaType ]] = None content : Dict [ str , flask_openapi3 . models . common . MediaType ] pydantic-field \u2693\ufe0e description : str pydantic-field \u2693\ufe0e Schema ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class Schema ( BaseModel ): ref : Optional [ str ] = Field ( None , alias = \"$ref\" ) title : Optional [ str ] = None multipleOf : Optional [ float ] = None maximum : Optional [ float ] = None exclusiveMaximum : Optional [ float ] = None minimum : Optional [ float ] = None exclusiveMinimum : Optional [ float ] = None maxLength : Optional [ int ] = Field ( None , gte = 0 ) minLength : Optional [ int ] = Field ( None , gte = 0 ) pattern : Optional [ str ] = None maxItems : Optional [ int ] = Field ( None , gte = 0 ) minItems : Optional [ int ] = Field ( None , gte = 0 ) uniqueItems : Optional [ bool ] = None maxProperties : Optional [ int ] = Field ( None , gte = 0 ) minProperties : Optional [ int ] = Field ( None , gte = 0 ) required : Optional [ List [ str ]] = None enum : Optional [ List [ Any ]] = None type : Optional [ str ] = None allOf : Optional [ List [ Any ]] = None oneOf : Optional [ List [ Any ]] = None anyOf : Optional [ List [ Any ]] = None not_ : Optional [ Any ] = Field ( None , alias = \"not\" ) items : Optional [ Any ] = None properties : Optional [ Dict [ str , Any ]] = None additionalProperties : Optional [ Union [ Dict [ str , Any ], bool ]] = None description : Optional [ str ] = None format : Optional [ str ] = None default : Optional [ Any ] = None nullable : Optional [ bool ] = None readOnly : Optional [ bool ] = None writeOnly : Optional [ bool ] = None externalDocs : Optional [ ExternalDocumentation ] = None example : Optional [ Any ] = None deprecated : Optional [ bool ] = None additionalProperties : Union [ Dict [ str , Any ], bool ] pydantic-field \u2693\ufe0e allOf : List [ Any ] pydantic-field \u2693\ufe0e anyOf : List [ Any ] pydantic-field \u2693\ufe0e default : Any pydantic-field \u2693\ufe0e deprecated : bool pydantic-field \u2693\ufe0e description : str pydantic-field \u2693\ufe0e enum : List [ Any ] pydantic-field \u2693\ufe0e example : Any pydantic-field \u2693\ufe0e exclusiveMaximum : float pydantic-field \u2693\ufe0e exclusiveMinimum : float pydantic-field \u2693\ufe0e externalDocs : ExternalDocumentation pydantic-field \u2693\ufe0e format : str pydantic-field \u2693\ufe0e items : Any pydantic-field \u2693\ufe0e maxItems : int pydantic-field \u2693\ufe0e maxLength : int pydantic-field \u2693\ufe0e maxProperties : int pydantic-field \u2693\ufe0e maximum : float pydantic-field \u2693\ufe0e minItems : int pydantic-field \u2693\ufe0e minLength : int pydantic-field \u2693\ufe0e minProperties : int pydantic-field \u2693\ufe0e minimum : float pydantic-field \u2693\ufe0e multipleOf : float pydantic-field \u2693\ufe0e not_ : Any pydantic-field \u2693\ufe0e nullable : bool pydantic-field \u2693\ufe0e oneOf : List [ Any ] pydantic-field \u2693\ufe0e pattern : str pydantic-field \u2693\ufe0e properties : Dict [ str , Any ] pydantic-field \u2693\ufe0e readOnly : bool pydantic-field \u2693\ufe0e ref : str pydantic-field \u2693\ufe0e required : List [ str ] pydantic-field \u2693\ufe0e title : str pydantic-field \u2693\ufe0e type : str pydantic-field \u2693\ufe0e uniqueItems : bool pydantic-field \u2693\ufe0e writeOnly : bool pydantic-field \u2693\ufe0e","title":"common"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding","text":"Source code in flask_openapi3/models/common.py class Encoding ( BaseModel ): contentType : Optional [ str ] = None # headers: Optional[Dict[str, Union[\"Header\", Reference]]] = None style : Optional [ str ] = None explode : Optional [ bool ] = True allowReserved : Optional [ bool ] = None","title":"Encoding"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding.allowReserved","text":"","title":"allowReserved"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding.contentType","text":"","title":"contentType"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding.explode","text":"","title":"explode"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding.style","text":"","title":"style"},{"location":"Reference/Model/common/#flask_openapi3.models.common.ExternalDocumentation","text":"Source code in flask_openapi3/models/common.py class ExternalDocumentation ( BaseModel ): url : str description : Optional [ str ] = None","title":"ExternalDocumentation"},{"location":"Reference/Model/common/#flask_openapi3.models.common.ExternalDocumentation.description","text":"","title":"description"},{"location":"Reference/Model/common/#flask_openapi3.models.common.ExternalDocumentation.url","text":"","title":"url"},{"location":"Reference/Model/common/#flask_openapi3.models.common.MediaType","text":"Source code in flask_openapi3/models/common.py class MediaType ( BaseModel ): schema_ : Optional [ Union [ Schema , Reference ]] = Field ( None , alias = \"schema\" ) encoding : Optional [ Dict [ str , Encoding ]] = None","title":"MediaType"},{"location":"Reference/Model/common/#flask_openapi3.models.common.MediaType.encoding","text":"","title":"encoding"},{"location":"Reference/Model/common/#flask_openapi3.models.common.MediaType.schema_","text":"","title":"schema_"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Reference","text":"Source code in flask_openapi3/models/common.py class Reference ( BaseModel ): ref : str = Field ( ... , alias = \"$ref\" )","title":"Reference"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Reference.ref","text":"","title":"ref"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Response","text":"Source code in flask_openapi3/models/common.py class Response ( BaseModel ): description : Optional [ str ] content : Optional [ Dict [ str , MediaType ]] = None","title":"Response"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Response.content","text":"","title":"content"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Response.description","text":"","title":"description"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema","text":"Source code in flask_openapi3/models/common.py class Schema ( BaseModel ): ref : Optional [ str ] = Field ( None , alias = \"$ref\" ) title : Optional [ str ] = None multipleOf : Optional [ float ] = None maximum : Optional [ float ] = None exclusiveMaximum : Optional [ float ] = None minimum : Optional [ float ] = None exclusiveMinimum : Optional [ float ] = None maxLength : Optional [ int ] = Field ( None , gte = 0 ) minLength : Optional [ int ] = Field ( None , gte = 0 ) pattern : Optional [ str ] = None maxItems : Optional [ int ] = Field ( None , gte = 0 ) minItems : Optional [ int ] = Field ( None , gte = 0 ) uniqueItems : Optional [ bool ] = None maxProperties : Optional [ int ] = Field ( None , gte = 0 ) minProperties : Optional [ int ] = Field ( None , gte = 0 ) required : Optional [ List [ str ]] = None enum : Optional [ List [ Any ]] = None type : Optional [ str ] = None allOf : Optional [ List [ Any ]] = None oneOf : Optional [ List [ Any ]] = None anyOf : Optional [ List [ Any ]] = None not_ : Optional [ Any ] = Field ( None , alias = \"not\" ) items : Optional [ Any ] = None properties : Optional [ Dict [ str , Any ]] = None additionalProperties : Optional [ Union [ Dict [ str , Any ], bool ]] = None description : Optional [ str ] = None format : Optional [ str ] = None default : Optional [ Any ] = None nullable : Optional [ bool ] = None readOnly : Optional [ bool ] = None writeOnly : Optional [ bool ] = None externalDocs : Optional [ ExternalDocumentation ] = None example : Optional [ Any ] = None deprecated : Optional [ bool ] = None","title":"Schema"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.additionalProperties","text":"","title":"additionalProperties"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.allOf","text":"","title":"allOf"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.anyOf","text":"","title":"anyOf"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.default","text":"","title":"default"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.deprecated","text":"","title":"deprecated"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.description","text":"","title":"description"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.enum","text":"","title":"enum"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.example","text":"","title":"example"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.exclusiveMaximum","text":"","title":"exclusiveMaximum"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.exclusiveMinimum","text":"","title":"exclusiveMinimum"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.externalDocs","text":"","title":"externalDocs"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.format","text":"","title":"format"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.items","text":"","title":"items"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.maxItems","text":"","title":"maxItems"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.maxLength","text":"","title":"maxLength"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.maxProperties","text":"","title":"maxProperties"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.maximum","text":"","title":"maximum"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.minItems","text":"","title":"minItems"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.minLength","text":"","title":"minLength"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.minProperties","text":"","title":"minProperties"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.minimum","text":"","title":"minimum"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.multipleOf","text":"","title":"multipleOf"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.not_","text":"","title":"not_"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.nullable","text":"","title":"nullable"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.oneOf","text":"","title":"oneOf"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.pattern","text":"","title":"pattern"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.properties","text":"","title":"properties"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.readOnly","text":"","title":"readOnly"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.ref","text":"","title":"ref"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.required","text":"","title":"required"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.title","text":"","title":"title"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.type","text":"","title":"type"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.uniqueItems","text":"","title":"uniqueItems"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.writeOnly","text":"","title":"writeOnly"},{"location":"Reference/Model/component/","text":"Components ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/component.py class Components ( BaseModel ): schemas : Optional [ Dict [ str , Union [ Schema , Reference ]]] = None securitySchemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None schemas : Dict [ str , Union [ flask_openapi3 . models . common . Schema , flask_openapi3 . models . common . Reference ]] pydantic-field \u2693\ufe0e securitySchemes : Dict [ str , Union [ flask_openapi3 . models . security . APIKey , flask_openapi3 . models . security . HTTPBase , flask_openapi3 . models . security . OAuth2 , flask_openapi3 . models . security . OpenIdConnect , flask_openapi3 . models . security . HTTPBearer , flask_openapi3 . models . common . Reference ]] pydantic-field \u2693\ufe0e","title":"component"},{"location":"Reference/Model/component/#flask_openapi3.models.component.Components","text":"Source code in flask_openapi3/models/component.py class Components ( BaseModel ): schemas : Optional [ Dict [ str , Union [ Schema , Reference ]]] = None securitySchemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None","title":"Components"},{"location":"Reference/Model/component/#flask_openapi3.models.component.Components.schemas","text":"","title":"schemas"},{"location":"Reference/Model/component/#flask_openapi3.models.component.Components.securitySchemes","text":"","title":"securitySchemes"},{"location":"Reference/Model/file/","text":"FileStorage ( FileStorage ) \u2693\ufe0e An uploaded file included as part of the request data. Source code in flask_openapi3/models/file.py class FileStorage ( _FileStorage ): \"\"\" An uploaded file included as part of the request data. \"\"\" @classmethod def __get_validators__ ( cls ) -> 'Callable[..., Any]' : # one or more validators may be yielded which will be called in the # order to validate the input, each validator will receive as an input # the value returned from the previous validator yield cls . validate @classmethod def __modify_schema__ ( cls , field_schema : Dict [ str , Any ]) -> None : field_schema . update ( format = \"binary\" , type = \"string\" ) @classmethod def validate ( cls , value : Any ) -> '_FileStorage' : if not isinstance ( value , _FileStorage ): raise TypeError ( 'werkzeug.datastructures.FileStorage required' ) return value __get_validators__ () classmethod special \u2693\ufe0e Source code in flask_openapi3/models/file.py @classmethod def __get_validators__ ( cls ) -> 'Callable[..., Any]' : # one or more validators may be yielded which will be called in the # order to validate the input, each validator will receive as an input # the value returned from the previous validator yield cls . validate __modify_schema__ ( field_schema ) classmethod special \u2693\ufe0e Source code in flask_openapi3/models/file.py @classmethod def __modify_schema__ ( cls , field_schema : Dict [ str , Any ]) -> None : field_schema . update ( format = \"binary\" , type = \"string\" ) validate ( value ) classmethod \u2693\ufe0e Source code in flask_openapi3/models/file.py @classmethod def validate ( cls , value : Any ) -> '_FileStorage' : if not isinstance ( value , _FileStorage ): raise TypeError ( 'werkzeug.datastructures.FileStorage required' ) return value","title":"file"},{"location":"Reference/Model/file/#flask_openapi3.models.file.FileStorage","text":"An uploaded file included as part of the request data. Source code in flask_openapi3/models/file.py class FileStorage ( _FileStorage ): \"\"\" An uploaded file included as part of the request data. \"\"\" @classmethod def __get_validators__ ( cls ) -> 'Callable[..., Any]' : # one or more validators may be yielded which will be called in the # order to validate the input, each validator will receive as an input # the value returned from the previous validator yield cls . validate @classmethod def __modify_schema__ ( cls , field_schema : Dict [ str , Any ]) -> None : field_schema . update ( format = \"binary\" , type = \"string\" ) @classmethod def validate ( cls , value : Any ) -> '_FileStorage' : if not isinstance ( value , _FileStorage ): raise TypeError ( 'werkzeug.datastructures.FileStorage required' ) return value","title":"FileStorage"},{"location":"Reference/Model/file/#flask_openapi3.models.file.FileStorage.__get_validators__","text":"Source code in flask_openapi3/models/file.py @classmethod def __get_validators__ ( cls ) -> 'Callable[..., Any]' : # one or more validators may be yielded which will be called in the # order to validate the input, each validator will receive as an input # the value returned from the previous validator yield cls . validate","title":"__get_validators__()"},{"location":"Reference/Model/file/#flask_openapi3.models.file.FileStorage.__modify_schema__","text":"Source code in flask_openapi3/models/file.py @classmethod def __modify_schema__ ( cls , field_schema : Dict [ str , Any ]) -> None : field_schema . update ( format = \"binary\" , type = \"string\" )","title":"__modify_schema__()"},{"location":"Reference/Model/file/#flask_openapi3.models.file.FileStorage.validate","text":"Source code in flask_openapi3/models/file.py @classmethod def validate ( cls , value : Any ) -> '_FileStorage' : if not isinstance ( value , _FileStorage ): raise TypeError ( 'werkzeug.datastructures.FileStorage required' ) return value","title":"validate()"},{"location":"Reference/Model/oauth/","text":"OAuthConfig ( BaseModel ) pydantic-model \u2693\ufe0e More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md Source code in flask_openapi3/models/oauth.py class OAuthConfig ( BaseModel ): \"\"\" More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md \"\"\" clientId : Optional [ str ] = None clientSecret : Optional [ str ] = None realm : Optional [ str ] = None appName : Optional [ str ] = None scopeSeparator : Optional [ str ] = None scopes : Optional [ str ] = None additionalQueryStringParams : Optional [ Dict [ str , str ]] = None useBasicAuthenticationWithAccessCodeGrant : Optional [ bool ] = False usePkceWithAuthorizationCodeGrant : Optional [ bool ] = False additionalQueryStringParams : Dict [ str , str ] pydantic-field \u2693\ufe0e appName : str pydantic-field \u2693\ufe0e clientId : str pydantic-field \u2693\ufe0e clientSecret : str pydantic-field \u2693\ufe0e realm : str pydantic-field \u2693\ufe0e scopeSeparator : str pydantic-field \u2693\ufe0e scopes : str pydantic-field \u2693\ufe0e useBasicAuthenticationWithAccessCodeGrant : bool pydantic-field \u2693\ufe0e usePkceWithAuthorizationCodeGrant : bool pydantic-field \u2693\ufe0e","title":"oauth"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig","text":"More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md Source code in flask_openapi3/models/oauth.py class OAuthConfig ( BaseModel ): \"\"\" More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md \"\"\" clientId : Optional [ str ] = None clientSecret : Optional [ str ] = None realm : Optional [ str ] = None appName : Optional [ str ] = None scopeSeparator : Optional [ str ] = None scopes : Optional [ str ] = None additionalQueryStringParams : Optional [ Dict [ str , str ]] = None useBasicAuthenticationWithAccessCodeGrant : Optional [ bool ] = False usePkceWithAuthorizationCodeGrant : Optional [ bool ] = False","title":"OAuthConfig"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.additionalQueryStringParams","text":"","title":"additionalQueryStringParams"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.appName","text":"","title":"appName"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.clientId","text":"","title":"clientId"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.clientSecret","text":"","title":"clientSecret"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.realm","text":"","title":"realm"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.scopeSeparator","text":"","title":"scopeSeparator"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.scopes","text":"","title":"scopes"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.useBasicAuthenticationWithAccessCodeGrant","text":"","title":"useBasicAuthenticationWithAccessCodeGrant"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.usePkceWithAuthorizationCodeGrant","text":"","title":"usePkceWithAuthorizationCodeGrant"},{"location":"Reference/Model/parameter/","text":"Parameter ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/parameter.py class Parameter ( BaseModel ): name : str in_ : ParameterInType = Field ( ... , alias = \"in\" ) # ... is REQUIRED description : Optional [ str ] = None required : Optional [ bool ] = None schema_ : Optional [ Union [ Schema , Reference ]] = Field ( None , alias = \"schema\" ) description : str pydantic-field \u2693\ufe0e in_ : ParameterInType pydantic-field required \u2693\ufe0e name : str pydantic-field required \u2693\ufe0e required : bool pydantic-field \u2693\ufe0e schema_ : Union [ flask_openapi3 . models . common . Schema , flask_openapi3 . models . common . Reference ] pydantic-field \u2693\ufe0e ParameterInType ( str , Enum ) \u2693\ufe0e An enumeration. Source code in flask_openapi3/models/parameter.py class ParameterInType ( str , Enum ): query = \"query\" header = \"header\" path = \"path\" cookie = \"cookie\" cookie \u2693\ufe0e header \u2693\ufe0e path \u2693\ufe0e query \u2693\ufe0e","title":"parameter"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter","text":"Source code in flask_openapi3/models/parameter.py class Parameter ( BaseModel ): name : str in_ : ParameterInType = Field ( ... , alias = \"in\" ) # ... is REQUIRED description : Optional [ str ] = None required : Optional [ bool ] = None schema_ : Optional [ Union [ Schema , Reference ]] = Field ( None , alias = \"schema\" )","title":"Parameter"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.description","text":"","title":"description"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.in_","text":"","title":"in_"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.name","text":"","title":"name"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.required","text":"","title":"required"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.schema_","text":"","title":"schema_"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType","text":"An enumeration. Source code in flask_openapi3/models/parameter.py class ParameterInType ( str , Enum ): query = \"query\" header = \"header\" path = \"path\" cookie = \"cookie\"","title":"ParameterInType"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.cookie","text":"","title":"cookie"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.header","text":"","title":"header"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.path","text":"","title":"path"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.query","text":"","title":"query"},{"location":"Reference/Model/path/","text":"Operation ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/path.py class Operation ( BaseModel ): tags : Optional [ List [ str ]] = None summary : Optional [ str ] = None description : Optional [ str ] = None parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None requestBody : Optional [ Union [ RequestBody , Reference ]] = None responses : Dict [ str , Response ] = None security : Optional [ List [ Dict [ str , List [ str ]]]] = None deprecated : Optional [ bool ] = None operationId : Optional [ str ] = None deprecated : bool pydantic-field \u2693\ufe0e description : str pydantic-field \u2693\ufe0e operationId : str pydantic-field \u2693\ufe0e parameters : List [ Union [ flask_openapi3 . models . parameter . Parameter , flask_openapi3 . models . common . Reference ]] pydantic-field \u2693\ufe0e requestBody : Union [ flask_openapi3 . models . path . RequestBody , flask_openapi3 . models . common . Reference ] pydantic-field \u2693\ufe0e responses : Dict [ str , flask_openapi3 . models . common . Response ] pydantic-field \u2693\ufe0e security : List [ Dict [ str , List [ str ]]] pydantic-field \u2693\ufe0e summary : str pydantic-field \u2693\ufe0e tags : List [ str ] pydantic-field \u2693\ufe0e PathItem ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/path.py class PathItem ( BaseModel ): ref : Optional [ str ] = Field ( None , alias = \"$ref\" ) summary : Optional [ str ] = None description : Optional [ str ] = None get : Optional [ Operation ] = None put : Optional [ Operation ] = None post : Optional [ Operation ] = None delete : Optional [ Operation ] = None options : Optional [ Operation ] = None head : Optional [ Operation ] = None patch : Optional [ Operation ] = None trace : Optional [ Operation ] = None delete : Operation pydantic-field \u2693\ufe0e description : str pydantic-field \u2693\ufe0e get : Operation pydantic-field \u2693\ufe0e head : Operation pydantic-field \u2693\ufe0e options : Operation pydantic-field \u2693\ufe0e patch : Operation pydantic-field \u2693\ufe0e post : Operation pydantic-field \u2693\ufe0e put : Operation pydantic-field \u2693\ufe0e ref : str pydantic-field \u2693\ufe0e summary : str pydantic-field \u2693\ufe0e trace : Operation pydantic-field \u2693\ufe0e RequestBody ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/path.py class RequestBody ( BaseModel ): description : Optional [ str ] = None content : Dict [ str , MediaType ] required : Optional [ bool ] = Field ( default = True ) content : Dict [ str , flask_openapi3 . models . common . MediaType ] pydantic-field required \u2693\ufe0e description : str pydantic-field \u2693\ufe0e required : bool pydantic-field \u2693\ufe0e","title":"path"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation","text":"Source code in flask_openapi3/models/path.py class Operation ( BaseModel ): tags : Optional [ List [ str ]] = None summary : Optional [ str ] = None description : Optional [ str ] = None parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None requestBody : Optional [ Union [ RequestBody , Reference ]] = None responses : Dict [ str , Response ] = None security : Optional [ List [ Dict [ str , List [ str ]]]] = None deprecated : Optional [ bool ] = None operationId : Optional [ str ] = None","title":"Operation"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.deprecated","text":"","title":"deprecated"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.description","text":"","title":"description"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.operationId","text":"","title":"operationId"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.parameters","text":"","title":"parameters"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.requestBody","text":"","title":"requestBody"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.responses","text":"","title":"responses"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.security","text":"","title":"security"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.summary","text":"","title":"summary"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.tags","text":"","title":"tags"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem","text":"Source code in flask_openapi3/models/path.py class PathItem ( BaseModel ): ref : Optional [ str ] = Field ( None , alias = \"$ref\" ) summary : Optional [ str ] = None description : Optional [ str ] = None get : Optional [ Operation ] = None put : Optional [ Operation ] = None post : Optional [ Operation ] = None delete : Optional [ Operation ] = None options : Optional [ Operation ] = None head : Optional [ Operation ] = None patch : Optional [ Operation ] = None trace : Optional [ Operation ] = None","title":"PathItem"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.delete","text":"","title":"delete"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.description","text":"","title":"description"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.get","text":"","title":"get"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.head","text":"","title":"head"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.options","text":"","title":"options"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.patch","text":"","title":"patch"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.post","text":"","title":"post"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.put","text":"","title":"put"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.ref","text":"","title":"ref"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.summary","text":"","title":"summary"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.trace","text":"","title":"trace"},{"location":"Reference/Model/path/#flask_openapi3.models.path.RequestBody","text":"Source code in flask_openapi3/models/path.py class RequestBody ( BaseModel ): description : Optional [ str ] = None content : Dict [ str , MediaType ] required : Optional [ bool ] = Field ( default = True )","title":"RequestBody"},{"location":"Reference/Model/path/#flask_openapi3.models.path.RequestBody.content","text":"","title":"content"},{"location":"Reference/Model/path/#flask_openapi3.models.path.RequestBody.description","text":"","title":"description"},{"location":"Reference/Model/path/#flask_openapi3.models.path.RequestBody.required","text":"","title":"required"},{"location":"Reference/Model/security/","text":"SecurityScheme \u2693\ufe0e APIKey ( SecurityBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class APIKey ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . apiKey , alias = \"type\" ) in_ : APIKeyIn = Field ( ... , alias = \"in\" ) name : str in_ : APIKeyIn pydantic-field required \u2693\ufe0e name : str pydantic-field required \u2693\ufe0e APIKeyIn ( str , Enum ) \u2693\ufe0e An enumeration. Source code in flask_openapi3/models/security.py class APIKeyIn ( str , Enum ): query = \"query\" header = \"header\" cookie = \"cookie\" cookie \u2693\ufe0e header \u2693\ufe0e query \u2693\ufe0e HTTPBase ( SecurityBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class HTTPBase ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . http , alias = \"type\" ) scheme : str scheme : str pydantic-field required \u2693\ufe0e HTTPBearer ( HTTPBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class HTTPBearer ( HTTPBase ): scheme = \"bearer\" bearerFormat : Optional [ str ] = None bearerFormat : str pydantic-field \u2693\ufe0e OAuth2 ( SecurityBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuth2 ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . oauth2 , alias = \"type\" ) flows : OAuthFlows flows : OAuthFlows pydantic-field required \u2693\ufe0e OAuthFlow ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlow ( BaseModel ): refreshUrl : Optional [ str ] = None scopes : Dict [ str , str ] = {} refreshUrl : str pydantic-field \u2693\ufe0e scopes : Dict [ str , str ] pydantic-field \u2693\ufe0e OAuthFlowAuthorizationCode ( OAuthFlow ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlowAuthorizationCode ( OAuthFlow ): authorizationUrl : str tokenUrl : str authorizationUrl : str pydantic-field required \u2693\ufe0e tokenUrl : str pydantic-field required \u2693\ufe0e OAuthFlowClientCredentials ( OAuthFlow ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlowClientCredentials ( OAuthFlow ): tokenUrl : str tokenUrl : str pydantic-field required \u2693\ufe0e OAuthFlowImplicit ( OAuthFlow ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlowImplicit ( OAuthFlow ): authorizationUrl : str authorizationUrl : str pydantic-field required \u2693\ufe0e OAuthFlowPassword ( OAuthFlow ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlowPassword ( OAuthFlow ): tokenUrl : str tokenUrl : str pydantic-field required \u2693\ufe0e OAuthFlows ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlows ( BaseModel ): implicit : Optional [ OAuthFlowImplicit ] = None password : Optional [ OAuthFlowPassword ] = None clientCredentials : Optional [ OAuthFlowClientCredentials ] = None authorizationCode : Optional [ OAuthFlowAuthorizationCode ] = None authorizationCode : OAuthFlowAuthorizationCode pydantic-field \u2693\ufe0e clientCredentials : OAuthFlowClientCredentials pydantic-field \u2693\ufe0e implicit : OAuthFlowImplicit pydantic-field \u2693\ufe0e password : OAuthFlowPassword pydantic-field \u2693\ufe0e OpenIdConnect ( SecurityBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OpenIdConnect ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . openIdConnect , alias = \"type\" ) openIdConnectUrl : str openIdConnectUrl : str pydantic-field required \u2693\ufe0e SecurityBase ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class SecurityBase ( BaseModel ): type_ : SecuritySchemeType = Field ( ... , alias = \"type\" ) description : Optional [ str ] = None description : str pydantic-field \u2693\ufe0e type_ : SecuritySchemeType pydantic-field required \u2693\ufe0e SecuritySchemeType ( str , Enum ) \u2693\ufe0e An enumeration. Source code in flask_openapi3/models/security.py class SecuritySchemeType ( str , Enum ): apiKey = \"apiKey\" http = \"http\" oauth2 = \"oauth2\" openIdConnect = \"openIdConnect\" apiKey \u2693\ufe0e http \u2693\ufe0e oauth2 \u2693\ufe0e openIdConnect \u2693\ufe0e","title":"security"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecurityScheme","text":"","title":"SecurityScheme"},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKey","text":"Source code in flask_openapi3/models/security.py class APIKey ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . apiKey , alias = \"type\" ) in_ : APIKeyIn = Field ( ... , alias = \"in\" ) name : str","title":"APIKey"},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKey.in_","text":"","title":"in_"},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKey.name","text":"","title":"name"},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKeyIn","text":"An enumeration. Source code in flask_openapi3/models/security.py class APIKeyIn ( str , Enum ): query = \"query\" header = \"header\" cookie = \"cookie\"","title":"APIKeyIn"},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKeyIn.cookie","text":"","title":"cookie"},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKeyIn.header","text":"","title":"header"},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKeyIn.query","text":"","title":"query"},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBase","text":"Source code in flask_openapi3/models/security.py class HTTPBase ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . http , alias = \"type\" ) scheme : str","title":"HTTPBase"},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBase.scheme","text":"","title":"scheme"},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBearer","text":"Source code in flask_openapi3/models/security.py class HTTPBearer ( HTTPBase ): scheme = \"bearer\" bearerFormat : Optional [ str ] = None","title":"HTTPBearer"},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBearer.bearerFormat","text":"","title":"bearerFormat"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuth2","text":"Source code in flask_openapi3/models/security.py class OAuth2 ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . oauth2 , alias = \"type\" ) flows : OAuthFlows","title":"OAuth2"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuth2.flows","text":"","title":"flows"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlow","text":"Source code in flask_openapi3/models/security.py class OAuthFlow ( BaseModel ): refreshUrl : Optional [ str ] = None scopes : Dict [ str , str ] = {}","title":"OAuthFlow"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlow.refreshUrl","text":"","title":"refreshUrl"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlow.scopes","text":"","title":"scopes"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowAuthorizationCode","text":"Source code in flask_openapi3/models/security.py class OAuthFlowAuthorizationCode ( OAuthFlow ): authorizationUrl : str tokenUrl : str","title":"OAuthFlowAuthorizationCode"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowAuthorizationCode.authorizationUrl","text":"","title":"authorizationUrl"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowAuthorizationCode.tokenUrl","text":"","title":"tokenUrl"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowClientCredentials","text":"Source code in flask_openapi3/models/security.py class OAuthFlowClientCredentials ( OAuthFlow ): tokenUrl : str","title":"OAuthFlowClientCredentials"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowClientCredentials.tokenUrl","text":"","title":"tokenUrl"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowImplicit","text":"Source code in flask_openapi3/models/security.py class OAuthFlowImplicit ( OAuthFlow ): authorizationUrl : str","title":"OAuthFlowImplicit"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowImplicit.authorizationUrl","text":"","title":"authorizationUrl"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowPassword","text":"Source code in flask_openapi3/models/security.py class OAuthFlowPassword ( OAuthFlow ): tokenUrl : str","title":"OAuthFlowPassword"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowPassword.tokenUrl","text":"","title":"tokenUrl"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows","text":"Source code in flask_openapi3/models/security.py class OAuthFlows ( BaseModel ): implicit : Optional [ OAuthFlowImplicit ] = None password : Optional [ OAuthFlowPassword ] = None clientCredentials : Optional [ OAuthFlowClientCredentials ] = None authorizationCode : Optional [ OAuthFlowAuthorizationCode ] = None","title":"OAuthFlows"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.authorizationCode","text":"","title":"authorizationCode"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.clientCredentials","text":"","title":"clientCredentials"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.implicit","text":"","title":"implicit"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.password","text":"","title":"password"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OpenIdConnect","text":"Source code in flask_openapi3/models/security.py class OpenIdConnect ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . openIdConnect , alias = \"type\" ) openIdConnectUrl : str","title":"OpenIdConnect"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OpenIdConnect.openIdConnectUrl","text":"","title":"openIdConnectUrl"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecurityBase","text":"Source code in flask_openapi3/models/security.py class SecurityBase ( BaseModel ): type_ : SecuritySchemeType = Field ( ... , alias = \"type\" ) description : Optional [ str ] = None","title":"SecurityBase"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecurityBase.description","text":"","title":"description"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecurityBase.type_","text":"","title":"type_"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType","text":"An enumeration. Source code in flask_openapi3/models/security.py class SecuritySchemeType ( str , Enum ): apiKey = \"apiKey\" http = \"http\" oauth2 = \"oauth2\" openIdConnect = \"openIdConnect\"","title":"SecuritySchemeType"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.apiKey","text":"","title":"apiKey"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.http","text":"","title":"http"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.oauth2","text":"","title":"oauth2"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.openIdConnect","text":"","title":"openIdConnect"},{"location":"Reference/Model/tag/","text":"Tag ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/tag.py class Tag ( BaseModel ): name : str description : Optional [ str ] = None externalDocs : Optional [ ExternalDocumentation ] = None description : str pydantic-field \u2693\ufe0e externalDocs : ExternalDocumentation pydantic-field \u2693\ufe0e name : str pydantic-field required \u2693\ufe0e","title":"tag"},{"location":"Reference/Model/tag/#flask_openapi3.models.tag.Tag","text":"Source code in flask_openapi3/models/tag.py class Tag ( BaseModel ): name : str description : Optional [ str ] = None externalDocs : Optional [ ExternalDocumentation ] = None","title":"Tag"},{"location":"Reference/Model/tag/#flask_openapi3.models.tag.Tag.description","text":"","title":"description"},{"location":"Reference/Model/tag/#flask_openapi3.models.tag.Tag.externalDocs","text":"","title":"externalDocs"},{"location":"Reference/Model/tag/#flask_openapi3.models.tag.Tag.name","text":"","title":"name"},{"location":"Reference/Model/validation_error/","text":"UnprocessableEntity ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/validation_error.py class UnprocessableEntity ( BaseModel ): loc : Optional [ List [ str ]] = Field ( None , title = \"Location\" ) msg : Optional [ str ] = Field ( None , title = \"Message\" ) type_ : Optional [ str ] = Field ( None , title = \"Error Type\" ) ctx : Optional [ Dict [ str , Any ]] = Field ( None , title = \"Error context\" ) ctx : Dict [ str , Any ] pydantic-field \u2693\ufe0e loc : List [ str ] pydantic-field \u2693\ufe0e msg : str pydantic-field \u2693\ufe0e type_ : str pydantic-field \u2693\ufe0e","title":"validation_error"},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity","text":"Source code in flask_openapi3/models/validation_error.py class UnprocessableEntity ( BaseModel ): loc : Optional [ List [ str ]] = Field ( None , title = \"Location\" ) msg : Optional [ str ] = Field ( None , title = \"Message\" ) type_ : Optional [ str ] = Field ( None , title = \"Error Type\" ) ctx : Optional [ Dict [ str , Any ]] = Field ( None , title = \"Error context\" )","title":"UnprocessableEntity"},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.ctx","text":"","title":"ctx"},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.loc","text":"","title":"loc"},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.msg","text":"","title":"msg"},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.type_","text":"","title":"type_"},{"location":"zh/Changelog/","text":"v1.0.1 2022-02-12 \u2693\ufe0e add operation_id for OpenAPI Specification v1.0.0 2022-01-11 \u2693\ufe0e #10 Fix: header's title case. Thinks @rrr34 #9 Support for extra responses. Thinks @blynn99 #12 Support for path operation field deprecated. Thinks @blynn99 Add keyword parameters summary and description Add servers for OpenAPI Upgrade swagger UI v4.1.3 Upgrade Redoc v2.0.0-rc.59 Add rapidoc Breaking Changes \u2693\ufe0e Renamed securitySchemes to security_schemes Renamed docExpansion to doc_expansion v0.9.9 2021-12-09 \u2693\ufe0e fix: default value in query and form model fix: empty form and body support from __future__ import annotations drop python36 v0.9.8 2021-11-12 \u2693\ufe0e add Configuration docExpansion query and form add array support v0.9.7 2021-08-19 \u2693\ufe0e fix: path $ref fix: markdown enum v0.9.6 2021-08-18 \u2693\ufe0e Export to markdown(Experimental) v0.9.5 2021-07-11 \u2693\ufe0e remove validate_resp and add VALIDATE_RESPONSE v0.9.4 2021-07-03 \u2693\ufe0e OpenAPI add responses and APIBlueprint add abp_responses fix: validate response error when responses is empty dict #3 endpoint and APIBlueprint add doc_ui . Thinks @DerManoMann #4 fix: response description. Thinks @DerManoMann #5 add custom parameter oauth_config . Thinks @DerManoMann #6 support validation Flask Response. Thinks @DerManoMann #7 fix: response validation does not work when uses http.HTTPStatus enums as status_code. Thinks @DerManoMann v0.9.3 2021-06-08 \u2693\ufe0e APIBlueprint add abp_tags and abp_security fix: tags de-duplication fix: operation summary and description v0.9.2 2021-05-17 \u2693\ufe0e fix: _do_decorator add doc_ui args. support close swagger UI and redoc v0.9.1 2021-05-16 \u2693\ufe0e fix\uff1arequest data is None json\u2192body set 422 Content-Type application/json raise response validate exception fix: TypeError: issubclass() arg 1 must be a class v0.9.0 2021-05-13 \u2693\ufe0e first version","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"zh/Changelog/#v101-2022-02-12","text":"add operation_id for OpenAPI Specification","title":"v1.0.1 2022-02-12"},{"location":"zh/Changelog/#v100-2022-01-11","text":"#10 Fix: header's title case. Thinks @rrr34 #9 Support for extra responses. Thinks @blynn99 #12 Support for path operation field deprecated. Thinks @blynn99 Add keyword parameters summary and description Add servers for OpenAPI Upgrade swagger UI v4.1.3 Upgrade Redoc v2.0.0-rc.59 Add rapidoc","title":"v1.0.0 2022-01-11"},{"location":"zh/Changelog/#breaking-changes","text":"Renamed securitySchemes to security_schemes Renamed docExpansion to doc_expansion","title":"Breaking Changes"},{"location":"zh/Changelog/#v099-2021-12-09","text":"fix: default value in query and form model fix: empty form and body support from __future__ import annotations drop python36","title":"v0.9.9 2021-12-09"},{"location":"zh/Changelog/#v098-2021-11-12","text":"add Configuration docExpansion query and form add array support","title":"v0.9.8 2021-11-12"},{"location":"zh/Changelog/#v097-2021-08-19","text":"fix: path $ref fix: markdown enum","title":"v0.9.7 2021-08-19"},{"location":"zh/Changelog/#v096-2021-08-18","text":"Export to markdown(Experimental)","title":"v0.9.6 2021-08-18"},{"location":"zh/Changelog/#v095-2021-07-11","text":"remove validate_resp and add VALIDATE_RESPONSE","title":"v0.9.5 2021-07-11"},{"location":"zh/Changelog/#v094-2021-07-03","text":"OpenAPI add responses and APIBlueprint add abp_responses fix: validate response error when responses is empty dict #3 endpoint and APIBlueprint add doc_ui . Thinks @DerManoMann #4 fix: response description. Thinks @DerManoMann #5 add custom parameter oauth_config . Thinks @DerManoMann #6 support validation Flask Response. Thinks @DerManoMann #7 fix: response validation does not work when uses http.HTTPStatus enums as status_code. Thinks @DerManoMann","title":"v0.9.4 2021-07-03"},{"location":"zh/Changelog/#v093-2021-06-08","text":"APIBlueprint add abp_tags and abp_security fix: tags de-duplication fix: operation summary and description","title":"v0.9.3 2021-06-08"},{"location":"zh/Changelog/#v092-2021-05-17","text":"fix: _do_decorator add doc_ui args. support close swagger UI and redoc","title":"v0.9.2 2021-05-17"},{"location":"zh/Changelog/#v091-2021-05-16","text":"fix\uff1arequest data is None json\u2192body set 422 Content-Type application/json raise response validate exception fix: TypeError: issubclass() arg 1 must be a class","title":"v0.9.1 2021-05-16"},{"location":"zh/Changelog/#v090-2021-05-13","text":"first version","title":"v0.9.0 2021-05-13"},{"location":"zh/Example/","text":"Simple Demo \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pydantic import BaseModel from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) book_tag = Tag ( name = 'book' , description = 'Some Book' ) class BookQuery ( BaseModel ): age : int author : str @app . get ( '/book' , tags = [ book_tag ]) def get_book ( query : BookQuery ): \"\"\"get books get all books \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : query . author }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : query . author } ] } if __name__ == '__main__' : app . run ( debug = True ) REST Demo \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 from http import HTTPStatus from typing import Optional , List from pydantic import BaseModel , Field from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI from flask_openapi3.models.security import HTTPBearer , OAuth2 , OAuthFlows , OAuthFlowImplicit info = Info ( title = 'book API' , version = '1.0.0' ) jwt = HTTPBearer ( bearerFormat = \"JWT\" ) oauth2 = OAuth2 ( flows = OAuthFlows ( implicit = OAuthFlowImplicit ( authorizationUrl = \"https://example.com/api/oauth/dialog\" , scopes = { \"write:pets\" : \"modify pets in your account\" , \"read:pets\" : \"read your pets\" } ))) security_schemes = { \"jwt\" : jwt , \"oauth2\" : oauth2 } class NotFoundResponse ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Resource not found!\" , description = \"Exception Information\" ) app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes , responses = { \"404\" : NotFoundResponse }) book_tag = Tag ( name = 'book' , description = 'Some Book' ) security = [ { \"jwt\" : []}, { \"oauth2\" : [ \"write:pets\" , \"read:pets\" ]} ] app . config [ \"VALIDATE_RESPONSE\" ] = True class BookPath ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) class BookQuery ( BaseModel ): age : Optional [ int ] = Field ( None , description = 'Age' ) s_list : List [ str ] = Field ( None , alias = 's_list[]' , description = 'some array' ) class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookBodyWithID ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) age : Optional [ int ] = Field ( None , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookResponse ( BaseModel ): code : int = Field ( 0 , description = \"Status Code\" ) message : str = Field ( \"ok\" , description = \"Exception Information\" ) data : Optional [ BookBodyWithID ] @app . get ( '/book/<int:bid>' , tags = [ book_tag ], summary = 'new summary' , description = 'new description' , responses = { \"200\" : BookResponse }, extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}, security = security ) def get_book ( path : BookPath ): \"\"\"Get book Get some book by id, like: http://localhost:5000/book/3 \"\"\" if path . bid == 4 : return NotFoundResponse () . dict (), 404 return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : 3 , \"author\" : 'no' }} # set doc_ui False disable openapi UI @app . get ( '/book' , doc_ui = True , deprecated = True ) def get_books ( query : BookQuery ): \"\"\"get books get all books \"\"\" print ( query ) return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : 'a1' }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : 'a2' } ] } @app . post ( '/book' , tags = [ book_tag ], responses = { \"200\" : BookResponse }) def create_book ( body : BookBody ): print ( body ) return { \"code\" : 0 , \"message\" : \"ok\" }, HTTPStatus . OK @app . put ( '/book/<int:bid>' , tags = [ book_tag ]) def update_book ( path : BookPath , body : BookBody ): print ( path ) print ( body ) return { \"code\" : 0 , \"message\" : \"ok\" } @app . delete ( '/book/<int:bid>' , tags = [ book_tag ], doc_ui = False ) def delete_book ( path : BookPath ): print ( path ) return { \"code\" : 0 , \"message\" : \"ok\" } if __name__ == '__main__' : app . run ( debug = True ) APIBlueprint \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 from typing import Optional from pydantic import BaseModel , Field from flask_openapi3 import APIBlueprint , OpenAPI from flask_openapi3 import HTTPBearer from flask_openapi3 import Tag , Info info = Info ( title = 'book API' , version = '1.0.0' ) security_schemes = { \"jwt\" : HTTPBearer ( bearerFormat = \"JWT\" )} app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes ) tag = Tag ( name = 'book' , description = \"Some Book\" ) security = [{ \"jwt\" : []}] class Unauthorized ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Unauthorized!\" , description = \"Exception Information\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ], abp_security = security , abp_responses = { \"401\" : Unauthorized }, # disable openapi UI doc_ui = True ) class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class Path ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) @api . get ( '/book' , doc_ui = False ) def get_book (): return { \"code\" : 0 , \"message\" : \"ok\" } @api . post ( '/book' , extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}) def create_book ( body : BookBody ): assert body . age == 3 return { \"code\" : 0 , \"message\" : \"ok\" } @api . put ( '/book/<int:bid>' ) def update_book ( path : Path , body : BookBody ): assert path . bid == 1 assert body . age == 3 return { \"code\" : 0 , \"message\" : \"ok\" } # register api app . register_api ( api ) if __name__ == '__main__' : app . run ( debug = True ) Upload File Demo \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from pydantic import BaseModel , Field from flask_openapi3 import OpenAPI , FileStorage app = OpenAPI ( __name__ ) class UploadFileForm ( BaseModel ): file : FileStorage file_type : str = Field ( None , description = \"File Type\" ) @app . post ( '/upload' ) def upload_file ( form : UploadFileForm ): print ( form . file . filename ) print ( form . file_type ) form . file . save ( 'test.jpg' ) return { \"code\" : 0 , \"message\" : \"ok\" } if __name__ == '__main__' : app . run ( debug = True ) A complete project \u2693\ufe0e see flask-api-demo","title":"\u793a\u4f8b"},{"location":"zh/Example/#simple-demo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pydantic import BaseModel from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) book_tag = Tag ( name = 'book' , description = 'Some Book' ) class BookQuery ( BaseModel ): age : int author : str @app . get ( '/book' , tags = [ book_tag ]) def get_book ( query : BookQuery ): \"\"\"get books get all books \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : query . author }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : query . author } ] } if __name__ == '__main__' : app . run ( debug = True )","title":"Simple Demo"},{"location":"zh/Example/#rest-demo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 from http import HTTPStatus from typing import Optional , List from pydantic import BaseModel , Field from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI from flask_openapi3.models.security import HTTPBearer , OAuth2 , OAuthFlows , OAuthFlowImplicit info = Info ( title = 'book API' , version = '1.0.0' ) jwt = HTTPBearer ( bearerFormat = \"JWT\" ) oauth2 = OAuth2 ( flows = OAuthFlows ( implicit = OAuthFlowImplicit ( authorizationUrl = \"https://example.com/api/oauth/dialog\" , scopes = { \"write:pets\" : \"modify pets in your account\" , \"read:pets\" : \"read your pets\" } ))) security_schemes = { \"jwt\" : jwt , \"oauth2\" : oauth2 } class NotFoundResponse ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Resource not found!\" , description = \"Exception Information\" ) app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes , responses = { \"404\" : NotFoundResponse }) book_tag = Tag ( name = 'book' , description = 'Some Book' ) security = [ { \"jwt\" : []}, { \"oauth2\" : [ \"write:pets\" , \"read:pets\" ]} ] app . config [ \"VALIDATE_RESPONSE\" ] = True class BookPath ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) class BookQuery ( BaseModel ): age : Optional [ int ] = Field ( None , description = 'Age' ) s_list : List [ str ] = Field ( None , alias = 's_list[]' , description = 'some array' ) class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookBodyWithID ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) age : Optional [ int ] = Field ( None , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookResponse ( BaseModel ): code : int = Field ( 0 , description = \"Status Code\" ) message : str = Field ( \"ok\" , description = \"Exception Information\" ) data : Optional [ BookBodyWithID ] @app . get ( '/book/<int:bid>' , tags = [ book_tag ], summary = 'new summary' , description = 'new description' , responses = { \"200\" : BookResponse }, extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}, security = security ) def get_book ( path : BookPath ): \"\"\"Get book Get some book by id, like: http://localhost:5000/book/3 \"\"\" if path . bid == 4 : return NotFoundResponse () . dict (), 404 return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : 3 , \"author\" : 'no' }} # set doc_ui False disable openapi UI @app . get ( '/book' , doc_ui = True , deprecated = True ) def get_books ( query : BookQuery ): \"\"\"get books get all books \"\"\" print ( query ) return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : 'a1' }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : 'a2' } ] } @app . post ( '/book' , tags = [ book_tag ], responses = { \"200\" : BookResponse }) def create_book ( body : BookBody ): print ( body ) return { \"code\" : 0 , \"message\" : \"ok\" }, HTTPStatus . OK @app . put ( '/book/<int:bid>' , tags = [ book_tag ]) def update_book ( path : BookPath , body : BookBody ): print ( path ) print ( body ) return { \"code\" : 0 , \"message\" : \"ok\" } @app . delete ( '/book/<int:bid>' , tags = [ book_tag ], doc_ui = False ) def delete_book ( path : BookPath ): print ( path ) return { \"code\" : 0 , \"message\" : \"ok\" } if __name__ == '__main__' : app . run ( debug = True )","title":"REST Demo"},{"location":"zh/Example/#apiblueprint","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 from typing import Optional from pydantic import BaseModel , Field from flask_openapi3 import APIBlueprint , OpenAPI from flask_openapi3 import HTTPBearer from flask_openapi3 import Tag , Info info = Info ( title = 'book API' , version = '1.0.0' ) security_schemes = { \"jwt\" : HTTPBearer ( bearerFormat = \"JWT\" )} app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes ) tag = Tag ( name = 'book' , description = \"Some Book\" ) security = [{ \"jwt\" : []}] class Unauthorized ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Unauthorized!\" , description = \"Exception Information\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ], abp_security = security , abp_responses = { \"401\" : Unauthorized }, # disable openapi UI doc_ui = True ) class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class Path ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) @api . get ( '/book' , doc_ui = False ) def get_book (): return { \"code\" : 0 , \"message\" : \"ok\" } @api . post ( '/book' , extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}) def create_book ( body : BookBody ): assert body . age == 3 return { \"code\" : 0 , \"message\" : \"ok\" } @api . put ( '/book/<int:bid>' ) def update_book ( path : Path , body : BookBody ): assert path . bid == 1 assert body . age == 3 return { \"code\" : 0 , \"message\" : \"ok\" } # register api app . register_api ( api ) if __name__ == '__main__' : app . run ( debug = True )","title":"APIBlueprint"},{"location":"zh/Example/#upload-file-demo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from pydantic import BaseModel , Field from flask_openapi3 import OpenAPI , FileStorage app = OpenAPI ( __name__ ) class UploadFileForm ( BaseModel ): file : FileStorage file_type : str = Field ( None , description = \"File Type\" ) @app . post ( '/upload' ) def upload_file ( form : UploadFileForm ): print ( form . file . filename ) print ( form . file_type ) form . file . save ( 'test.jpg' ) return { \"code\" : 0 , \"message\" : \"ok\" } if __name__ == '__main__' : app . run ( debug = True )","title":"Upload File Demo"},{"location":"zh/Example/#a-complete-project","text":"see flask-api-demo","title":"A complete project"},{"location":"zh/LICENSE/","text":"MIT License Copyright \u00a9 2021 llc Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"\u8bb8\u53ef"},{"location":"zh/Quickstart/","text":"flask_openapi3 \u57fa\u4e8e Flask \u548c Pydantic \uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528Flask\u4e00\u6837\u4f7f\u7528 flask_openapi3 \u3002 \u6700\u5c0f\u5e94\u7528 \u2693\ufe0e \u50cf Flask \u4e00\u6837\uff0c\u521b\u5efa hello.py : 1 2 3 4 5 6 7 8 9 10 11 12 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) @app . route ( '/' ) def hello_world (): return 'Hello, World!' if __name__ == '__main__' : app . run () \u7136\u540e\u8fd0\u884c\uff1a 1 python hello.py \u4f60\u5c06\u4f1a\u770b\u5230\u8f93\u51fa\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 __ _ _ / _| | | | | |_| | __ _ ___| | __ | _| |/ _` / __| |/ / | | | | (_| \\__ \\ < _ _____ |_| |_|\\__,_|___/_|\\_\\ (_)|____ | ___ _ __ ___ _ __ __ _ _ __ _ / / / _ \\| '_ \\ / _ \\ '_ \\ / _` | '_ \\| | \\ \\ | (_) | |_) | __/ | | | (_| | |_) | |.___/ / \\___/| .__/ \\___|_| |_|\\__,_| .__/|_|\\____/ | | | | |_| |_| version: 1.0.1 * Serving Flask app 'just_flask' (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) RESTful API \u2693\ufe0e \u4f60\u53ef\u4ee5\u5728 flask-openapi3 \u4e2d\u4f7f\u7528 get \uff0c post \uff0c put \uff0c patch \uff0c delete \u7b49 RESTful API \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) @app . get ( '/book' ) def get_books (): return [ \"book1\" , \"book2\" ] @app . post ( '/book' ) def create_book (): return { \"message\" : \"success\" } if __name__ == '__main__' : app . run () APIBlueprint \u2693\ufe0e APIBlueprint \u57fa\u4e8e Flask Blueprint \uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 app.register_api \u6765\u4ee3\u66ff app.register_blueprint \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' ) @api . post ( '/book' ) def create_book (): return { \"message\" : \"success\" } # register api app . register_api ( api ) if __name__ == '__main__' : app . run ()","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"zh/Quickstart/#_1","text":"\u50cf Flask \u4e00\u6837\uff0c\u521b\u5efa hello.py : 1 2 3 4 5 6 7 8 9 10 11 12 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) @app . route ( '/' ) def hello_world (): return 'Hello, World!' if __name__ == '__main__' : app . run () \u7136\u540e\u8fd0\u884c\uff1a 1 python hello.py \u4f60\u5c06\u4f1a\u770b\u5230\u8f93\u51fa\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 __ _ _ / _| | | | | |_| | __ _ ___| | __ | _| |/ _` / __| |/ / | | | | (_| \\__ \\ < _ _____ |_| |_|\\__,_|___/_|\\_\\ (_)|____ | ___ _ __ ___ _ __ __ _ _ __ _ / / / _ \\| '_ \\ / _ \\ '_ \\ / _` | '_ \\| | \\ \\ | (_) | |_) | __/ | | | (_| | |_) | |.___/ / \\___/| .__/ \\___|_| |_|\\__,_| .__/|_|\\____/ | | | | |_| |_| version: 1.0.1 * Serving Flask app 'just_flask' (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)","title":"\u6700\u5c0f\u5e94\u7528"},{"location":"zh/Quickstart/#restful-api","text":"\u4f60\u53ef\u4ee5\u5728 flask-openapi3 \u4e2d\u4f7f\u7528 get \uff0c post \uff0c put \uff0c patch \uff0c delete \u7b49 RESTful API \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) @app . get ( '/book' ) def get_books (): return [ \"book1\" , \"book2\" ] @app . post ( '/book' ) def create_book (): return { \"message\" : \"success\" } if __name__ == '__main__' : app . run ()","title":"RESTful API"},{"location":"zh/Quickstart/#apiblueprint","text":"APIBlueprint \u57fa\u4e8e Flask Blueprint \uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 app.register_api \u6765\u4ee3\u66ff app.register_blueprint \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask_openapi3 import OpenAPI app = OpenAPI ( __name__ ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' ) @api . post ( '/book' ) def create_book (): return { \"message\" : \"success\" } # register api app . register_api ( api ) if __name__ == '__main__' : app . run ()","title":"APIBlueprint"},{"location":"zh/","text":"\u4e3a\u4f60\u7684 Flask \u9879\u76ee\u751f\u6210 RESTful API \u548c OpenAPI \u6587\u6863\u3002 \u4f9d\u8d56 \u2693\ufe0e Python 3.7+ flask-openapi3 \u4f9d\u8d56\u4ee5\u4e0b\u5e93\uff1a Flask \uff1a\u7528\u4e8eWEB\u670d\u52a1 Pydantic \uff1a\u7528\u4e8e\u6570\u636e\u9a8c\u8bc1 \u5b89\u88c5 \u2693\ufe0e 1 pip install -U flask-openapi3 \u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b \u2693\ufe0e \u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u66f4\u591a\u793a\u4f8b\u8bf7\u67e5\u770b \u793a\u4f8b \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pydantic import BaseModel from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) book_tag = Tag ( name = 'book' , description = 'Some Book' ) class BookQuery ( BaseModel ): age : int author : str @app . get ( '/book' , tags = [ book_tag ]) def get_book ( query : BookQuery ): \"\"\"get books get all books \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : query . author }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : query . author } ] } if __name__ == '__main__' : app . run ( debug = True ) API \u6587\u6863 \u2693\ufe0e \u8fd0\u884c \u7b80\u5355\u793a\u4f8b \uff0c\u7136\u540e\u8bbf\u95ee http://127.0.0.1:5000/openapi \u3002 \u4f60\u5c06\u770b\u5230\u6587\u6863\u5165\u53e3\uff1a Swagger UI \uff0c Redoc \u548c RapiDoc \u3002","title":"\u7b80\u4ecb"},{"location":"zh/#_1","text":"Python 3.7+ flask-openapi3 \u4f9d\u8d56\u4ee5\u4e0b\u5e93\uff1a Flask \uff1a\u7528\u4e8eWEB\u670d\u52a1 Pydantic \uff1a\u7528\u4e8e\u6570\u636e\u9a8c\u8bc1","title":"\u4f9d\u8d56"},{"location":"zh/#_2","text":"1 pip install -U flask-openapi3","title":"\u5b89\u88c5"},{"location":"zh/#_3","text":"\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u66f4\u591a\u793a\u4f8b\u8bf7\u67e5\u770b \u793a\u4f8b \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pydantic import BaseModel from flask_openapi3 import Info , Tag from flask_openapi3 import OpenAPI info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) book_tag = Tag ( name = 'book' , description = 'Some Book' ) class BookQuery ( BaseModel ): age : int author : str @app . get ( '/book' , tags = [ book_tag ]) def get_book ( query : BookQuery ): \"\"\"get books get all books \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : [ { \"bid\" : 1 , \"age\" : query . age , \"author\" : query . author }, { \"bid\" : 2 , \"age\" : query . age , \"author\" : query . author } ] } if __name__ == '__main__' : app . run ( debug = True )","title":"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"},{"location":"zh/#api","text":"\u8fd0\u884c \u7b80\u5355\u793a\u4f8b \uff0c\u7136\u540e\u8bbf\u95ee http://127.0.0.1:5000/openapi \u3002 \u4f60\u5c06\u770b\u5230\u6587\u6863\u5165\u53e3\uff1a Swagger UI \uff0c Redoc \u548c RapiDoc \u3002","title":"API \u6587\u6863"},{"location":"zh/OpenAPI/Info/","text":"flask-openapi3 provide Swagger UI , Redoc and RapiDoc reference documentation. Before this, you should Learn something about OpenAPI spec . You must import Info from flask-openapi3 , it needs some parameters: title , version ... , more information see the OpenAPI Specification info-object . 1 2 3 4 5 6 7 8 9 from flask_openapi3 import Info from flask_openapi3 import OpenAPI , APIBlueprint info = Info ( title = 'book API' , version = '1.0.0' ) app = OpenAPI ( __name__ , info = info ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' ) if __name__ == '__main__' : app . run () run it, and go to http://127.0.0.1:5000/openapi , you will see the documentation.","title":"Info"},{"location":"zh/OpenAPI/OAuth/","text":"New in v0.9.4 You can pass oauth_config when initializing OpenAPI , see the demo . Here's more information about OAuth 2.0 configuration","title":"OAuth"},{"location":"zh/OpenAPI/Request/","text":"First, you need to import BaseModel from pydantic : 1 from pydantic import BaseModel path \u2693\ufe0e Request parameter in rules\uff0c @app.get('/book/<int:bid>') . You have to declare path model as a class that inherits from BaseModel : 1 2 3 4 5 6 7 class BookPath ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : BookPath ): ... query \u2693\ufe0e Receive flask request.args . Info 1 from flask import request like path , you need pass query to view function. 1 2 3 4 5 6 7 8 class BookQuery ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : BookPath , query : BookQuery ): ... form \u2693\ufe0e Receive flask request.form and request.files . 1 2 3 4 5 6 7 8 class UploadFileForm ( BaseModel ): file : FileStorage # request.files[\"file\"] file_type : str = Field ( None , description = \"File type\" ) @app . post ( '/upload' ) def upload_file ( form : UploadFileForm ): ... body \u2693\ufe0e Receive flask request.json . 1 2 3 4 5 6 7 8 class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) @app . post ( '/book' , tags = [ book_tag ]) def create_book ( body : BookBody ): ... header \u2693\ufe0e Receive flask request.headers . cookie \u2693\ufe0e Receive flask request.cookies .","title":"Request"},{"location":"zh/OpenAPI/Request/#path","text":"Request parameter in rules\uff0c @app.get('/book/<int:bid>') . You have to declare path model as a class that inherits from BaseModel : 1 2 3 4 5 6 7 class BookPath ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : BookPath ): ...","title":"path"},{"location":"zh/OpenAPI/Request/#query","text":"Receive flask request.args . Info 1 from flask import request like path , you need pass query to view function. 1 2 3 4 5 6 7 8 class BookQuery ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : BookPath , query : BookQuery ): ...","title":"query"},{"location":"zh/OpenAPI/Request/#form","text":"Receive flask request.form and request.files . 1 2 3 4 5 6 7 8 class UploadFileForm ( BaseModel ): file : FileStorage # request.files[\"file\"] file_type : str = Field ( None , description = \"File type\" ) @app . post ( '/upload' ) def upload_file ( form : UploadFileForm ): ...","title":"form"},{"location":"zh/OpenAPI/Request/#body","text":"Receive flask request.json . 1 2 3 4 5 6 7 8 class BookBody ( BaseModel ): age : Optional [ int ] = Field ( ... , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) @app . post ( '/book' , tags = [ book_tag ]) def create_book ( body : BookBody ): ...","title":"body"},{"location":"zh/OpenAPI/Request/#header","text":"Receive flask request.headers .","title":"header"},{"location":"zh/OpenAPI/Request/#cookie","text":"Receive flask request.cookies .","title":"cookie"},{"location":"zh/OpenAPI/Response/","text":"If you want to validate response and generate Schemas , pass the responses . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class BookBodyWithID ( BaseModel ): bid : int = Field ( ... , description = 'book id' ) age : Optional [ int ] = Field ( None , ge = 2 , le = 4 , description = 'Age' ) author : str = Field ( None , min_length = 2 , max_length = 4 , description = 'Author' ) class BookResponse ( BaseModel ): code : int = Field ( 0 , description = \"status code\" ) message : str = Field ( \"ok\" , description = \"exception information\" ) data : BookBodyWithID @app . get ( '/book/<int:bid>' , tags = [ book_tag ], responses = { \"200\" : BookResponse }, security = security ) def get_book ( path : BookPath , query : BookBody ): \"\"\"get book get book by id, age or author \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : query . age , \"author\" : query . author }} New in v0.9.5 By default, the VALIDATE_RESPONSE environment variable is False . You can set it True to validate responses in the development environment. Warning Please do not use it in the production environment, because it will reduce the performance. OpenAPI responses \u2693\ufe0e New in v0.9.4 You can add responses to each API under the app wrapper. 1 2 3 4 5 6 7 8 9 app = OpenAPI ( __name__ , info = info , responses = { \"404\" : NotFoundResponse } ) @app . get ( ... ) def endpoint (): ... abp_responses \u2693\ufe0e New in v0.9.4 You can add responses to each API under the api wrapper. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Unauthorized ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Unauthorized!\" , description = \"Exception Information\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_responses = { \"401\" : Unauthorized } ) @api . get ( ... ) def endpoint (): ... extra_responses \u2693\ufe0e New in v1.0.0 You can pass to your path operation decorators a parameter extra_responses . It receives a dict , the keys are status codes for each response, like 200 , and the values are other dicts with the information for each of them. Like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], responses = { \"200\" : BookResponse }, extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}, security = security ) def get_book ( path : BookPath ): ... @api . post ( '/book' , extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}) def create_book ( body : BookBody ): ... More information about OpenAPI responses \u2693\ufe0e OpenAPI Responses Object , it includes the Response Object. OpenAPI Response Object .","title":"Response"},{"location":"zh/OpenAPI/Response/#openapi-responses","text":"New in v0.9.4 You can add responses to each API under the app wrapper. 1 2 3 4 5 6 7 8 9 app = OpenAPI ( __name__ , info = info , responses = { \"404\" : NotFoundResponse } ) @app . get ( ... ) def endpoint (): ...","title":"OpenAPI responses"},{"location":"zh/OpenAPI/Response/#abp_responses","text":"New in v0.9.4 You can add responses to each API under the api wrapper. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Unauthorized ( BaseModel ): code : int = Field ( - 1 , description = \"Status Code\" ) message : str = Field ( \"Unauthorized!\" , description = \"Exception Information\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_responses = { \"401\" : Unauthorized } ) @api . get ( ... ) def endpoint (): ...","title":"abp_responses"},{"location":"zh/OpenAPI/Response/#extra_responses","text":"New in v1.0.0 You can pass to your path operation decorators a parameter extra_responses . It receives a dict , the keys are status codes for each response, like 200 , and the values are other dicts with the information for each of them. Like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], responses = { \"200\" : BookResponse }, extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}, security = security ) def get_book ( path : BookPath ): ... @api . post ( '/book' , extra_responses = { \"200\" : { \"content\" : { \"text/csv\" : { \"schema\" : { \"type\" : \"string\" }}}}}) def create_book ( body : BookBody ): ...","title":"extra_responses"},{"location":"zh/OpenAPI/Response/#more-information-about-openapi-responses","text":"OpenAPI Responses Object , it includes the Response Object. OpenAPI Response Object .","title":"More information about OpenAPI responses"},{"location":"zh/OpenAPI/SecuritySchemes/","text":"like Info , import HTTPBearer from flask_openapi3 , more features see the OpenAPI Specification security-scheme-object . First, you need define the security_schemes and security variable: 1 2 3 4 security_schemes = { \"jwt\" : HTTPBearer ( bearerFormat = \"JWT\" )} security = [{ \"jwt\" : []}] app = OpenAPI ( __name__ , info = info , security_schemes = security_schemes ) Second, add pass the security to your api, like this: 1 2 3 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], security = security ) def get_book ( path : Path , query : BookBody ): ... result: abp_security \u2693\ufe0e New in v0.9.3 You don't need to specify security for every api. 1 2 3 4 5 6 7 8 tag = Tag ( name = 'book' , description = \"Some Book\" ) security = [{ \"jwt\" : []}] api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ], abp_security = security ) @api . post ( '/book' ) def create_book ( body : BookBody ): ...","title":"SecuritySchemes"},{"location":"zh/OpenAPI/SecuritySchemes/#abp_security","text":"New in v0.9.3 You don't need to specify security for every api. 1 2 3 4 5 6 7 8 tag = Tag ( name = 'book' , description = \"Some Book\" ) security = [{ \"jwt\" : []}] api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ], abp_security = security ) @api . post ( '/book' ) def create_book ( body : BookBody ): ...","title":"abp_security"},{"location":"zh/OpenAPI/Specification/","text":"If you need the complete spec(json) , go to http://127.0.0.1:5000/openapi/openapi.json doc_ui \u2693\ufe0e You can pass doc_ui=False to disable the OpenAPI spec when init OpenAPI . 1 app = OpenAPI ( __name__ , info = info , doc_ui = False ) New in v0.9.4 You can also use doc_ui in endpoint or when initializing APIBlueprint . 1 2 3 4 5 6 7 8 9 10 11 api = APIBlueprint ( '/book' , __name__ , doc_ui = False ) # or @api . get ( '/book' , doc_ui = False ) def get_book (): ... deprecated \u2693\ufe0e New in v1.0.0 deprecated : mark as deprecated support. Default to not True. 1 2 3 @app . get ( '/book' , deprecated = True ) def get_books ( query : BookQuery ): ... doc_expansion \u2693\ufe0e Just for swagger UI. String=[\"list\", \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). More information to see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md 1 app = OpenAPI ( __name__ , info = info , doc_expansion = 'full' ) servers \u2693\ufe0e An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /. 1 2 3 4 5 6 7 from flask_openapi3 import OpenAPI , Server servers = [ Server ( url = 'http://127.0.0.1:5000' ), Server ( url = 'https://127.0.0.1:5000' ), ] app = OpenAPI ( __name__ , info = info , servers = servers )","title":"Specification"},{"location":"zh/OpenAPI/Specification/#doc_ui","text":"You can pass doc_ui=False to disable the OpenAPI spec when init OpenAPI . 1 app = OpenAPI ( __name__ , info = info , doc_ui = False ) New in v0.9.4 You can also use doc_ui in endpoint or when initializing APIBlueprint . 1 2 3 4 5 6 7 8 9 10 11 api = APIBlueprint ( '/book' , __name__ , doc_ui = False ) # or @api . get ( '/book' , doc_ui = False ) def get_book (): ...","title":"doc_ui"},{"location":"zh/OpenAPI/Specification/#deprecated","text":"New in v1.0.0 deprecated : mark as deprecated support. Default to not True. 1 2 3 @app . get ( '/book' , deprecated = True ) def get_books ( query : BookQuery ): ...","title":"deprecated"},{"location":"zh/OpenAPI/Specification/#doc_expansion","text":"Just for swagger UI. String=[\"list\", \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). More information to see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md 1 app = OpenAPI ( __name__ , info = info , doc_expansion = 'full' )","title":"doc_expansion"},{"location":"zh/OpenAPI/Specification/#servers","text":"An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /. 1 2 3 4 5 6 7 from flask_openapi3 import OpenAPI , Server servers = [ Server ( url = 'http://127.0.0.1:5000' ), Server ( url = 'https://127.0.0.1:5000' ), ] app = OpenAPI ( __name__ , info = info , servers = servers )","title":"servers"},{"location":"zh/OpenAPI/Summary%20and%20Description/","text":"You need add docs to the view-func. The first line is the summary, and the rest is the description. like this: 1 2 3 4 5 6 7 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], responses = { \"200\" : BookResponse }, security = security ) def get_book ( path : BookPath , query : BookBody ): \"\"\"Get book Get some book by id, like: http://localhost:5000/book/3 \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : query . age , \"author\" : query . author }} New in v1.0.0 Now keyword parameters summary and description is supported, it will be take first. 1 2 3 4 5 6 7 @app . get ( '/book/<int:bid>' , tags = [ book_tag ], summary = \"new summary\" , description = 'new description' , responses = { \"200\" : BookResponse }, security = security ) def get_book ( path : BookPath , query : BookBody ): \"\"\"Get book Get some book by id, like: http://localhost:5000/book/3 \"\"\" return { \"code\" : 0 , \"message\" : \"ok\" , \"data\" : { \"bid\" : path . bid , \"age\" : query . age , \"author\" : query . author }}","title":"Summary and Description"},{"location":"zh/OpenAPI/Tag/","text":"You can also specify tag for apis, like this: 1 2 3 4 5 6 7 8 9 10 ... book_tag = Tag ( name = 'book' , description = 'Some Book' ) @api . get ( '/book' , tags = [ book_tag ]) def get_book (): ... and then you will get the magic. abp_tags \u2693\ufe0e New in v0.9.3 You don't need specify tag for every api. 1 2 3 4 5 6 7 8 tag = Tag ( name = 'book' , description = \"Some Book\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ]) @api . post ( '/book' ) def create_book ( body : BookBody ): ...","title":"Tag"},{"location":"zh/OpenAPI/Tag/#abp_tags","text":"New in v0.9.3 You don't need specify tag for every api. 1 2 3 4 5 6 7 8 tag = Tag ( name = 'book' , description = \"Some Book\" ) api = APIBlueprint ( '/book' , __name__ , url_prefix = '/api' , abp_tags = [ tag ]) @api . post ( '/book' ) def create_book ( body : BookBody ): ...","title":"abp_tags"},{"location":"zh/Reference/APIBlueprint/","text":"Source code in flask_openapi3/openapi.py class APIBlueprint ( Blueprint ): def __init__ ( self , name : str , import_name : str , * , abp_tags : Optional [ List [ Tag ]] = None , abp_security : Optional [ List [ Dict [ str , List [ str ]]]] = None , abp_responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , ** kwargs : Any ) -> None : \"\"\" Based on Flask Blueprint Arguments: name: The name of the blueprint. Will be prepended to each endpoint name. import_name: The name of the blueprint package, usually ``__name__``. This helps locate the ``root_path`` for the blueprint. abp_tags: APIBlueprint tags for every api abp_security: APIBlueprint security for every api abp_responses: APIBlueprint response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. kwargs: Flask Blueprint kwargs \"\"\" super ( APIBlueprint , self ) . __init__ ( name , import_name , ** kwargs ) self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . abp_tags = abp_tags or [] self . abp_security = abp_security or [] self . abp_responses = abp_responses or {} self . doc_ui = doc_ui def _do_decorator ( self , rule : str , func : Callable , * , tags : List [ Tag ] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Dict [ str , Type [ BaseModel ]] = None , extra_responses : Dict [ str , dict ] = None , security : List [ Dict [ str , List [ Any ]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True , method : str = HTTPMethod . GET ) -> Tuple [ Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Dict [ str , Type [ BaseModel ]] ]: \"\"\" Collect openapi specification information :param rule: flask route :param func: flask view_func :param tags: api tag :param responses: response model :param extra_responses: extra response dict :param security: security name :param doc_ui: add openapi document UI(swagger and redoc). Defaults to True. :param deprecated: mark as deprecated support. Default to not True. :param operation_id: unique string used to identify the operation. :param method: api method :return: \"\"\" if self . doc_ui is True and doc_ui is True : if responses is None : responses = {} if extra_responses is None : extra_responses = {} validate_responses_type ( responses ) validate_responses_type ( self . abp_responses ) validate_responses_type ( extra_responses ) # global response combine api responses combine_responses = deepcopy ( self . abp_responses ) combine_responses . update ( ** responses ) # create operation operation = get_operation ( func , summary = summary , description = description ) # add security if security is None : security = [] operation . security = security + self . abp_security or None # only set `deprecated` if True otherwise leave it as None if deprecated : operation . deprecated = True # Unique string used to identify the operation. if operation_id : operation . operationId = operation_id else : operation . operationId = get_operation_id_for_path ( name = func . __name__ , path = rule , method = method ) # store tags tags = tags + self . abp_tags if tags else self . abp_tags parse_and_store_tags ( tags , self . tags , self . tag_names , operation ) # parse parameters header , cookie , path , query , form , body = \\ parse_parameters ( func , components_schemas = self . components_schemas , operation = operation ) # parse response get_responses ( combine_responses , extra_responses , self . components_schemas , operation ) uri = get_openapi_path ( rule ) # merge url_prefix and uri uri = self . url_prefix . rstrip ( \"/\" ) + \"/\" + uri . lstrip ( \"/\" ) if self . url_prefix else uri # strip the right slash uri = uri . rstrip ( '/' ) # parse method parse_method ( uri , method , self . paths , operation ) return header , cookie , path , query , form , body , combine_responses else : # parse parameters header , cookie , path , query , form , body = parse_parameters ( func , doc_ui = False ) return header , cookie , path , query , form , body , {} def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator __init__ ( self , name , import_name , * , abp_tags = None , abp_security = None , abp_responses = None , doc_ui = True , ** kwargs ) special \u2693\ufe0e Based on Flask Blueprint Parameters: Name Type Description Default name str The name of the blueprint. Will be prepended to each endpoint name. required import_name str The name of the blueprint package, usually __name__ . This helps locate the root_path for the blueprint. required abp_tags Optional[List[flask_openapi3.models.tag.Tag]] APIBlueprint tags for every api None abp_security Optional[List[Dict[str, List[str]]]] APIBlueprint security for every api None abp_responses Optional[Dict[str, Type[pydantic.main.BaseModel]]] APIBlueprint response model None doc_ui bool add openapi document UI(swagger and redoc). Defaults to True. True kwargs Any Flask Blueprint kwargs {} Source code in flask_openapi3/openapi.py def __init__ ( self , name : str , import_name : str , * , abp_tags : Optional [ List [ Tag ]] = None , abp_security : Optional [ List [ Dict [ str , List [ str ]]]] = None , abp_responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , ** kwargs : Any ) -> None : \"\"\" Based on Flask Blueprint Arguments: name: The name of the blueprint. Will be prepended to each endpoint name. import_name: The name of the blueprint package, usually ``__name__``. This helps locate the ``root_path`` for the blueprint. abp_tags: APIBlueprint tags for every api abp_security: APIBlueprint security for every api abp_responses: APIBlueprint response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. kwargs: Flask Blueprint kwargs \"\"\" super ( APIBlueprint , self ) . __init__ ( name , import_name , ** kwargs ) self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . abp_tags = abp_tags or [] self . abp_security = abp_security or [] self . abp_responses = abp_responses or {} self . doc_ui = doc_ui delete ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['DELETE']) Source code in flask_openapi3/openapi.py def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator get ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['GET']) Source code in flask_openapi3/openapi.py def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator patch ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['PATCH']) Source code in flask_openapi3/openapi.py def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator post ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['POST']) Source code in flask_openapi3/openapi.py def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator put ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['PUT']) Source code in flask_openapi3/openapi.py def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"APIBlueprint"},{"location":"zh/Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.__init__","text":"Based on Flask Blueprint Parameters: Name Type Description Default name str The name of the blueprint. Will be prepended to each endpoint name. required import_name str The name of the blueprint package, usually __name__ . This helps locate the root_path for the blueprint. required abp_tags Optional[List[flask_openapi3.models.tag.Tag]] APIBlueprint tags for every api None abp_security Optional[List[Dict[str, List[str]]]] APIBlueprint security for every api None abp_responses Optional[Dict[str, Type[pydantic.main.BaseModel]]] APIBlueprint response model None doc_ui bool add openapi document UI(swagger and redoc). Defaults to True. True kwargs Any Flask Blueprint kwargs {} Source code in flask_openapi3/openapi.py def __init__ ( self , name : str , import_name : str , * , abp_tags : Optional [ List [ Tag ]] = None , abp_security : Optional [ List [ Dict [ str , List [ str ]]]] = None , abp_responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , ** kwargs : Any ) -> None : \"\"\" Based on Flask Blueprint Arguments: name: The name of the blueprint. Will be prepended to each endpoint name. import_name: The name of the blueprint package, usually ``__name__``. This helps locate the ``root_path`` for the blueprint. abp_tags: APIBlueprint tags for every api abp_security: APIBlueprint security for every api abp_responses: APIBlueprint response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. kwargs: Flask Blueprint kwargs \"\"\" super ( APIBlueprint , self ) . __init__ ( name , import_name , ** kwargs ) self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . abp_tags = abp_tags or [] self . abp_security = abp_security or [] self . abp_responses = abp_responses or {} self . doc_ui = doc_ui","title":"__init__()"},{"location":"zh/Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.delete","text":"Decorator for rest api, like: app.route(methods=['DELETE']) Source code in flask_openapi3/openapi.py def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"delete()"},{"location":"zh/Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.get","text":"Decorator for rest api, like: app.route(methods=['GET']) Source code in flask_openapi3/openapi.py def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"get()"},{"location":"zh/Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.patch","text":"Decorator for rest api, like: app.route(methods=['PATCH']) Source code in flask_openapi3/openapi.py def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"patch()"},{"location":"zh/Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.post","text":"Decorator for rest api, like: app.route(methods=['POST']) Source code in flask_openapi3/openapi.py def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"post()"},{"location":"zh/Reference/APIBlueprint/#flask_openapi3.openapi.APIBlueprint.put","text":"Decorator for rest api, like: app.route(methods=['PUT']) Source code in flask_openapi3/openapi.py def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"put()"},{"location":"zh/Reference/OpenAPI/","text":"Source code in flask_openapi3/openapi.py class OpenAPI ( Flask ): def __init__ ( self , import_name : str , * , info : Optional [ Info ] = None , security_schemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None , oauth_config : Optional [ OAuthConfig ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , doc_expansion : str = \"list\" , doc_prefix : str = \"/openapi\" , api_doc_url : str = \"/openapi.json\" , swagger_url : str = \"/swagger\" , redoc_url : str = \"/redoc\" , rapidoc_url : str = \"/rapidoc\" , servers : Optional [ List [ Server ]] = None , ** kwargs : Any ) -> None : \"\"\" Based on Flask. Provide REST api, swagger-ui and redoc. Arguments: import_name: just flask import_name info: see https://spec.openapis.org/oas/v3.0.3#info-object security_schemes: see https://spec.openapis.org/oas/v3.0.3#security-scheme-object oauth_config: OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md responses: OpenAPI response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. doc_expansion: String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md doc_prefix: URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. api_doc_url: The OpenAPI Spec documentation. Defaults to '/openapi.json'. swagger_url: The Swagger UI documentation. Defaults to `/swagger`. redoc_url: The Redoc UI documentation. Defaults to `/redoc`. rapidoc_url: The RapiDoc UI documentation. Defaults to `/rapidoc`. servers: An array of Server Objects, which provide connectivity information to a target server. kwargs: Flask kwargs \"\"\" super ( OpenAPI , self ) . __init__ ( import_name , ** kwargs ) self . openapi_version = \"3.0.3\" if info is None : info = Info ( title = 'OpenAPI' , version = '1.0.0' ) assert isinstance ( info , Info ), f \"Info is required (got type { type ( info ) } )\" self . info = info self . security_schemes = security_schemes self . responses = responses or {} self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . doc_prefix = doc_prefix self . api_doc_url = api_doc_url self . swagger_url = swagger_url self . redoc_url = redoc_url self . rapidoc_url = rapidoc_url if oauth_config : if not isinstance ( oauth_config , OAuthConfig ): raise TypeError ( \"`initOAuth` must be `OAuthConfig`\" ) self . oauth_config = oauth_config if doc_ui : self . init_doc () self . doc_expansion = doc_expansion self . severs = servers def init_doc ( self ) -> None : \"\"\" Provide swagger-ui and redoc \"\"\" _here = os . path . dirname ( __file__ ) template_folder = os . path . join ( _here , 'templates' ) static_folder = os . path . join ( template_folder , 'static' ) blueprint = Blueprint ( 'openapi' , __name__ , url_prefix = self . doc_prefix , template_folder = template_folder , static_folder = static_folder ) blueprint . add_url_rule ( rule = self . api_doc_url , endpoint = 'api_doc' , view_func = lambda : self . api_doc ) blueprint . add_url_rule ( rule = self . swagger_url , endpoint = 'swagger' , view_func = lambda : render_template ( \"swagger.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ), doc_expansion = self . doc_expansion , oauth_config = self . oauth_config . dict () if self . oauth_config else None ) ) blueprint . add_url_rule ( rule = self . redoc_url , endpoint = 'redoc' , view_func = lambda : render_template ( \"redoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = self . rapidoc_url , endpoint = 'rapidoc' , view_func = lambda : render_template ( \"rapidoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = '/markdown' , endpoint = 'markdown' , view_func = lambda : self . export_to_markdown () ) blueprint . add_url_rule ( rule = '/' , endpoint = 'index' , view_func = lambda : render_template ( \"index.html\" , swagger_url = self . swagger_url . lstrip ( '/' ), redoc_url = self . redoc_url . lstrip ( '/' ), rapidoc_url = self . rapidoc_url . lstrip ( '/' ) ) ) self . register_blueprint ( blueprint ) def export_to_markdown ( self ) -> Response : \"\"\"Experimental\"\"\" md = StringIO () md . write ( openapi_to_markdown ( self . api_doc )) r = make_response ( md . getvalue ()) r . headers [ 'Content-Disposition' ] = 'attachment; filename=api.md' return r @property def api_doc ( self ) -> Dict : \"\"\"Generate spec json\"\"\" spec = APISpec ( openapi = self . openapi_version , info = self . info , servers = self . severs , externalDocs = ExternalDocumentation ( url = f ' { self . doc_prefix } /markdown' , description = 'Export to markdown' ) ) spec . tags = self . tags or None spec . paths = self . paths self . components . schemas = self . components_schemas self . components . securitySchemes = self . security_schemes spec . components = self . components return json . loads ( spec . json ( by_alias = True , exclude_none = True )) def register_api ( self , api : APIBlueprint ) -> None : \"\"\"Register APIBlueprint\"\"\" for tag in api . tags : if tag . name not in self . tag_names : self . tags . append ( tag ) self . paths . update ( ** api . paths ) self . components_schemas . update ( ** api . components_schemas ) self . register_blueprint ( api ) def _do_decorator ( self , rule : str , func : Callable , * , tags : List [ Tag ] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Dict [ str , Type [ BaseModel ]] = None , extra_responses : Dict [ str , dict ] = None , security : List [ Dict [ str , List [ Any ]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True , method : str = HTTPMethod . GET ) -> Tuple [ Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Type [ BaseModel ], Dict [ str , Type [ BaseModel ]] ]: \"\"\" Collect openapi specification information :param rule: flask route :param func: flask view_func :param tags: api tag :param responses: response model :param extra_responses: extra response dict :param security: security name :param deprecated: mark as deprecated support. Default to not True. :param doc_ui: add openapi document UI(swagger and redoc). Defaults to True. :param operation_id: unique string used to identify the operation. :param method: api method :return: \"\"\" if doc_ui is True : if responses is None : responses = {} if extra_responses is None : extra_responses = {} validate_responses_type ( responses ) validate_responses_type ( self . responses ) validate_responses_type ( extra_responses ) # global response combine api responses combine_responses = deepcopy ( self . responses ) combine_responses . update ( ** responses ) # create operation operation = get_operation ( func , summary = summary , description = description ) # add security operation . security = security # only set `deprecated` if True otherwise leave it as None if deprecated : operation . deprecated = True # Unique string used to identify the operation. if operation_id : operation . operationId = operation_id else : operation . operationId = get_operation_id_for_path ( name = func . __name__ , path = rule , method = method ) # store tags parse_and_store_tags ( tags , self . tags , self . tag_names , operation ) # parse parameters header , cookie , path , query , form , body = \\ parse_parameters ( func , components_schemas = self . components_schemas , operation = operation ) # parse response get_responses ( combine_responses , extra_responses , self . components_schemas , operation ) uri = get_openapi_path ( rule ) # parse method parse_method ( uri , method , self . paths , operation ) return header , cookie , path , query , form , body , combine_responses else : # parse parameters header , cookie , path , query , form , body = parse_parameters ( func , doc_ui = False ) return header , cookie , path , query , form , body , {} def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator api_doc : Dict property readonly \u2693\ufe0e Generate spec json __init__ ( self , import_name , * , info = None , security_schemes = None , oauth_config = None , responses = None , doc_ui = True , doc_expansion = 'list' , doc_prefix = '/openapi' , api_doc_url = '/openapi.json' , swagger_url = '/swagger' , redoc_url = '/redoc' , rapidoc_url = '/rapidoc' , servers = None , ** kwargs ) special \u2693\ufe0e Based on Flask. Provide REST api, swagger-ui and redoc. Parameters: Name Type Description Default import_name str just flask import_name required info Optional[flask_openapi3.models.info.Info] see https://spec.openapis.org/oas/v3.0.3#info-object None security_schemes Optional[Dict[str, Union[flask_openapi3.models.security.APIKey, flask_openapi3.models.security.HTTPBase, flask_openapi3.models.security.OAuth2, flask_openapi3.models.security.OpenIdConnect, flask_openapi3.models.security.HTTPBearer, flask_openapi3.models.common.Reference]]] see https://spec.openapis.org/oas/v3.0.3#security-scheme-object None oauth_config Optional[flask_openapi3.models.oauth.OAuthConfig] OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md None responses Optional[Dict[str, Type[pydantic.main.BaseModel]]] OpenAPI response model None doc_ui bool add openapi document UI(swagger and redoc). Defaults to True. True doc_expansion str String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md 'list' doc_prefix str URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. '/openapi' api_doc_url str The OpenAPI Spec documentation. Defaults to '/openapi.json'. '/openapi.json' swagger_url str The Swagger UI documentation. Defaults to /swagger . '/swagger' redoc_url str The Redoc UI documentation. Defaults to /redoc . '/redoc' rapidoc_url str The RapiDoc UI documentation. Defaults to /rapidoc . '/rapidoc' servers Optional[List[flask_openapi3.models.server.Server]] An array of Server Objects, which provide connectivity information to a target server. None kwargs Any Flask kwargs {} Source code in flask_openapi3/openapi.py def __init__ ( self , import_name : str , * , info : Optional [ Info ] = None , security_schemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None , oauth_config : Optional [ OAuthConfig ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , doc_expansion : str = \"list\" , doc_prefix : str = \"/openapi\" , api_doc_url : str = \"/openapi.json\" , swagger_url : str = \"/swagger\" , redoc_url : str = \"/redoc\" , rapidoc_url : str = \"/rapidoc\" , servers : Optional [ List [ Server ]] = None , ** kwargs : Any ) -> None : \"\"\" Based on Flask. Provide REST api, swagger-ui and redoc. Arguments: import_name: just flask import_name info: see https://spec.openapis.org/oas/v3.0.3#info-object security_schemes: see https://spec.openapis.org/oas/v3.0.3#security-scheme-object oauth_config: OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md responses: OpenAPI response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. doc_expansion: String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md doc_prefix: URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. api_doc_url: The OpenAPI Spec documentation. Defaults to '/openapi.json'. swagger_url: The Swagger UI documentation. Defaults to `/swagger`. redoc_url: The Redoc UI documentation. Defaults to `/redoc`. rapidoc_url: The RapiDoc UI documentation. Defaults to `/rapidoc`. servers: An array of Server Objects, which provide connectivity information to a target server. kwargs: Flask kwargs \"\"\" super ( OpenAPI , self ) . __init__ ( import_name , ** kwargs ) self . openapi_version = \"3.0.3\" if info is None : info = Info ( title = 'OpenAPI' , version = '1.0.0' ) assert isinstance ( info , Info ), f \"Info is required (got type { type ( info ) } )\" self . info = info self . security_schemes = security_schemes self . responses = responses or {} self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . doc_prefix = doc_prefix self . api_doc_url = api_doc_url self . swagger_url = swagger_url self . redoc_url = redoc_url self . rapidoc_url = rapidoc_url if oauth_config : if not isinstance ( oauth_config , OAuthConfig ): raise TypeError ( \"`initOAuth` must be `OAuthConfig`\" ) self . oauth_config = oauth_config if doc_ui : self . init_doc () self . doc_expansion = doc_expansion self . severs = servers delete ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['DELETE']) Source code in flask_openapi3/openapi.py def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator export_to_markdown ( self ) \u2693\ufe0e Experimental Source code in flask_openapi3/openapi.py def export_to_markdown ( self ) -> Response : \"\"\"Experimental\"\"\" md = StringIO () md . write ( openapi_to_markdown ( self . api_doc )) r = make_response ( md . getvalue ()) r . headers [ 'Content-Disposition' ] = 'attachment; filename=api.md' return r get ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['GET']) Source code in flask_openapi3/openapi.py def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator init_doc ( self ) \u2693\ufe0e Provide swagger-ui and redoc Source code in flask_openapi3/openapi.py def init_doc ( self ) -> None : \"\"\" Provide swagger-ui and redoc \"\"\" _here = os . path . dirname ( __file__ ) template_folder = os . path . join ( _here , 'templates' ) static_folder = os . path . join ( template_folder , 'static' ) blueprint = Blueprint ( 'openapi' , __name__ , url_prefix = self . doc_prefix , template_folder = template_folder , static_folder = static_folder ) blueprint . add_url_rule ( rule = self . api_doc_url , endpoint = 'api_doc' , view_func = lambda : self . api_doc ) blueprint . add_url_rule ( rule = self . swagger_url , endpoint = 'swagger' , view_func = lambda : render_template ( \"swagger.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ), doc_expansion = self . doc_expansion , oauth_config = self . oauth_config . dict () if self . oauth_config else None ) ) blueprint . add_url_rule ( rule = self . redoc_url , endpoint = 'redoc' , view_func = lambda : render_template ( \"redoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = self . rapidoc_url , endpoint = 'rapidoc' , view_func = lambda : render_template ( \"rapidoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = '/markdown' , endpoint = 'markdown' , view_func = lambda : self . export_to_markdown () ) blueprint . add_url_rule ( rule = '/' , endpoint = 'index' , view_func = lambda : render_template ( \"index.html\" , swagger_url = self . swagger_url . lstrip ( '/' ), redoc_url = self . redoc_url . lstrip ( '/' ), rapidoc_url = self . rapidoc_url . lstrip ( '/' ) ) ) self . register_blueprint ( blueprint ) patch ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['PATCH']) Source code in flask_openapi3/openapi.py def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator post ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['POST']) Source code in flask_openapi3/openapi.py def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator put ( self , rule , * , tags = None , summary = None , description = None , responses = None , extra_responses = None , security = None , deprecated = None , operation_id = None , doc_ui = True ) \u2693\ufe0e Decorator for rest api, like: app.route(methods=['PUT']) Source code in flask_openapi3/openapi.py def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator register_api ( self , api ) \u2693\ufe0e Register APIBlueprint Source code in flask_openapi3/openapi.py def register_api ( self , api : APIBlueprint ) -> None : \"\"\"Register APIBlueprint\"\"\" for tag in api . tags : if tag . name not in self . tag_names : self . tags . append ( tag ) self . paths . update ( ** api . paths ) self . components_schemas . update ( ** api . components_schemas ) self . register_blueprint ( api )","title":"OpenAPI"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.api_doc","text":"Generate spec json","title":"api_doc"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.__init__","text":"Based on Flask. Provide REST api, swagger-ui and redoc. Parameters: Name Type Description Default import_name str just flask import_name required info Optional[flask_openapi3.models.info.Info] see https://spec.openapis.org/oas/v3.0.3#info-object None security_schemes Optional[Dict[str, Union[flask_openapi3.models.security.APIKey, flask_openapi3.models.security.HTTPBase, flask_openapi3.models.security.OAuth2, flask_openapi3.models.security.OpenIdConnect, flask_openapi3.models.security.HTTPBearer, flask_openapi3.models.common.Reference]]] see https://spec.openapis.org/oas/v3.0.3#security-scheme-object None oauth_config Optional[flask_openapi3.models.oauth.OAuthConfig] OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md None responses Optional[Dict[str, Type[pydantic.main.BaseModel]]] OpenAPI response model None doc_ui bool add openapi document UI(swagger and redoc). Defaults to True. True doc_expansion str String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md 'list' doc_prefix str URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. '/openapi' api_doc_url str The OpenAPI Spec documentation. Defaults to '/openapi.json'. '/openapi.json' swagger_url str The Swagger UI documentation. Defaults to /swagger . '/swagger' redoc_url str The Redoc UI documentation. Defaults to /redoc . '/redoc' rapidoc_url str The RapiDoc UI documentation. Defaults to /rapidoc . '/rapidoc' servers Optional[List[flask_openapi3.models.server.Server]] An array of Server Objects, which provide connectivity information to a target server. None kwargs Any Flask kwargs {} Source code in flask_openapi3/openapi.py def __init__ ( self , import_name : str , * , info : Optional [ Info ] = None , security_schemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None , oauth_config : Optional [ OAuthConfig ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , doc_ui : bool = True , doc_expansion : str = \"list\" , doc_prefix : str = \"/openapi\" , api_doc_url : str = \"/openapi.json\" , swagger_url : str = \"/swagger\" , redoc_url : str = \"/redoc\" , rapidoc_url : str = \"/rapidoc\" , servers : Optional [ List [ Server ]] = None , ** kwargs : Any ) -> None : \"\"\" Based on Flask. Provide REST api, swagger-ui and redoc. Arguments: import_name: just flask import_name info: see https://spec.openapis.org/oas/v3.0.3#info-object security_schemes: see https://spec.openapis.org/oas/v3.0.3#security-scheme-object oauth_config: OAuth 2.0 configuration, see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md responses: OpenAPI response model doc_ui: add openapi document UI(swagger and redoc). Defaults to True. doc_expansion: String=[\"list\"*, \"full\", \"none\"]. Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing). see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md doc_prefix: URL prefix used for OpenAPI document and UI. Defaults to '/openapi'. api_doc_url: The OpenAPI Spec documentation. Defaults to '/openapi.json'. swagger_url: The Swagger UI documentation. Defaults to `/swagger`. redoc_url: The Redoc UI documentation. Defaults to `/redoc`. rapidoc_url: The RapiDoc UI documentation. Defaults to `/rapidoc`. servers: An array of Server Objects, which provide connectivity information to a target server. kwargs: Flask kwargs \"\"\" super ( OpenAPI , self ) . __init__ ( import_name , ** kwargs ) self . openapi_version = \"3.0.3\" if info is None : info = Info ( title = 'OpenAPI' , version = '1.0.0' ) assert isinstance ( info , Info ), f \"Info is required (got type { type ( info ) } )\" self . info = info self . security_schemes = security_schemes self . responses = responses or {} self . paths = dict () self . components_schemas = dict () self . components = Components () self . tags = [] self . tag_names = [] self . doc_prefix = doc_prefix self . api_doc_url = api_doc_url self . swagger_url = swagger_url self . redoc_url = redoc_url self . rapidoc_url = rapidoc_url if oauth_config : if not isinstance ( oauth_config , OAuthConfig ): raise TypeError ( \"`initOAuth` must be `OAuthConfig`\" ) self . oauth_config = oauth_config if doc_ui : self . init_doc () self . doc_expansion = doc_expansion self . severs = servers","title":"__init__()"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.delete","text":"Decorator for rest api, like: app.route(methods=['DELETE']) Source code in flask_openapi3/openapi.py def delete ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . DELETE ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . DELETE ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"delete()"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.export_to_markdown","text":"Experimental Source code in flask_openapi3/openapi.py def export_to_markdown ( self ) -> Response : \"\"\"Experimental\"\"\" md = StringIO () md . write ( openapi_to_markdown ( self . api_doc )) r = make_response ( md . getvalue ()) r . headers [ 'Content-Disposition' ] = 'attachment; filename=api.md' return r","title":"export_to_markdown()"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.get","text":"Decorator for rest api, like: app.route(methods=['GET']) Source code in flask_openapi3/openapi.py def get ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . GET ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . GET ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"get()"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.init_doc","text":"Provide swagger-ui and redoc Source code in flask_openapi3/openapi.py def init_doc ( self ) -> None : \"\"\" Provide swagger-ui and redoc \"\"\" _here = os . path . dirname ( __file__ ) template_folder = os . path . join ( _here , 'templates' ) static_folder = os . path . join ( template_folder , 'static' ) blueprint = Blueprint ( 'openapi' , __name__ , url_prefix = self . doc_prefix , template_folder = template_folder , static_folder = static_folder ) blueprint . add_url_rule ( rule = self . api_doc_url , endpoint = 'api_doc' , view_func = lambda : self . api_doc ) blueprint . add_url_rule ( rule = self . swagger_url , endpoint = 'swagger' , view_func = lambda : render_template ( \"swagger.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ), doc_expansion = self . doc_expansion , oauth_config = self . oauth_config . dict () if self . oauth_config else None ) ) blueprint . add_url_rule ( rule = self . redoc_url , endpoint = 'redoc' , view_func = lambda : render_template ( \"redoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = self . rapidoc_url , endpoint = 'rapidoc' , view_func = lambda : render_template ( \"rapidoc.html\" , api_doc_url = self . api_doc_url . lstrip ( '/' ) ) ) blueprint . add_url_rule ( rule = '/markdown' , endpoint = 'markdown' , view_func = lambda : self . export_to_markdown () ) blueprint . add_url_rule ( rule = '/' , endpoint = 'index' , view_func = lambda : render_template ( \"index.html\" , swagger_url = self . swagger_url . lstrip ( '/' ), redoc_url = self . redoc_url . lstrip ( '/' ), rapidoc_url = self . rapidoc_url . lstrip ( '/' ) ) ) self . register_blueprint ( blueprint )","title":"init_doc()"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.patch","text":"Decorator for rest api, like: app.route(methods=['PATCH']) Source code in flask_openapi3/openapi.py def patch ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PATCH ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PATCH ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"patch()"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.post","text":"Decorator for rest api, like: app.route(methods=['POST']) Source code in flask_openapi3/openapi.py def post ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . POST ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . POST ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"post()"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.put","text":"Decorator for rest api, like: app.route(methods=['PUT']) Source code in flask_openapi3/openapi.py def put ( self , rule : str , * , tags : Optional [ List [ Tag ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , responses : Optional [ Dict [ str , Type [ BaseModel ]]] = None , extra_responses : Optional [ Dict [ str , dict ]] = None , security : Optional [ List [ Dict [ str , List [ Any ]]]] = None , deprecated : Optional [ bool ] = None , operation_id : Optional [ str ] = None , doc_ui : bool = True ) -> Callable : \"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\" def decorator ( func ) -> Callable : header , cookie , path , query , form , body , combine_responses = \\ self . _do_decorator ( rule , func , tags = tags , summary = summary , description = description , responses = responses , extra_responses = extra_responses , security = security , deprecated = deprecated , operation_id = operation_id , doc_ui = doc_ui , method = HTTPMethod . PUT ) @wraps ( func ) def wrapper ( ** kwargs ) -> Response : resp = _do_wrapper ( func , responses = combine_responses , header = header , cookie = cookie , path = path , query = query , form = form , body = body , ** kwargs ) return resp options = { \"methods\" : [ HTTPMethod . PUT ]} self . add_url_rule ( rule , view_func = wrapper , ** options ) return wrapper return decorator","title":"put()"},{"location":"zh/Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.register_api","text":"Register APIBlueprint Source code in flask_openapi3/openapi.py def register_api ( self , api : APIBlueprint ) -> None : \"\"\"Register APIBlueprint\"\"\" for tag in api . tags : if tag . name not in self . tag_names : self . tags . append ( tag ) self . paths . update ( ** api . paths ) self . components_schemas . update ( ** api . components_schemas ) self . register_blueprint ( api )","title":"register_api()"},{"location":"zh/Reference/Model/APISpec/","text":"Source code in flask_openapi3/models/__init__.py class APISpec ( BaseModel ): openapi : str info : Info servers : Optional [ List [ Server ]] = None paths : Dict [ str , PathItem ] = None components : Optional [ Components ] = None security : Optional [ List [ Dict [ str , List [ str ]]]] = None tags : Optional [ List [ Tag ]] = None externalDocs : Optional [ ExternalDocumentation ] = None components : Components pydantic-field \u2693\ufe0e externalDocs : ExternalDocumentation pydantic-field \u2693\ufe0e info : Info pydantic-field required \u2693\ufe0e openapi : str pydantic-field required \u2693\ufe0e paths : Dict [ str , flask_openapi3 . models . path . PathItem ] pydantic-field \u2693\ufe0e security : List [ Dict [ str , List [ str ]]] pydantic-field \u2693\ufe0e servers : List [ flask_openapi3 . models . server . Server ] pydantic-field \u2693\ufe0e tags : List [ flask_openapi3 . models . tag . Tag ] pydantic-field \u2693\ufe0e","title":"APISpec"},{"location":"zh/Reference/Model/APISpec/#flask_openapi3.models.APISpec.components","text":"","title":"components"},{"location":"zh/Reference/Model/APISpec/#flask_openapi3.models.APISpec.externalDocs","text":"","title":"externalDocs"},{"location":"zh/Reference/Model/APISpec/#flask_openapi3.models.APISpec.info","text":"","title":"info"},{"location":"zh/Reference/Model/APISpec/#flask_openapi3.models.APISpec.openapi","text":"","title":"openapi"},{"location":"zh/Reference/Model/APISpec/#flask_openapi3.models.APISpec.paths","text":"","title":"paths"},{"location":"zh/Reference/Model/APISpec/#flask_openapi3.models.APISpec.security","text":"","title":"security"},{"location":"zh/Reference/Model/APISpec/#flask_openapi3.models.APISpec.servers","text":"","title":"servers"},{"location":"zh/Reference/Model/APISpec/#flask_openapi3.models.APISpec.tags","text":"","title":"tags"},{"location":"zh/Reference/Model/common/","text":"Encoding ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class Encoding ( BaseModel ): contentType : Optional [ str ] = None # headers: Optional[Dict[str, Union[\"Header\", Reference]]] = None style : Optional [ str ] = None explode : Optional [ bool ] = True allowReserved : Optional [ bool ] = None allowReserved : bool pydantic-field \u2693\ufe0e contentType : str pydantic-field \u2693\ufe0e explode : bool pydantic-field \u2693\ufe0e style : str pydantic-field \u2693\ufe0e ExternalDocumentation ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class ExternalDocumentation ( BaseModel ): url : str description : Optional [ str ] = None description : str pydantic-field \u2693\ufe0e url : str pydantic-field required \u2693\ufe0e MediaType ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class MediaType ( BaseModel ): schema_ : Optional [ Union [ Schema , Reference ]] = Field ( None , alias = \"schema\" ) encoding : Optional [ Dict [ str , Encoding ]] = None encoding : Dict [ str , flask_openapi3 . models . common . Encoding ] pydantic-field \u2693\ufe0e schema_ : Union [ flask_openapi3 . models . common . Schema , flask_openapi3 . models . common . Reference ] pydantic-field \u2693\ufe0e Reference ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class Reference ( BaseModel ): ref : str = Field ( ... , alias = \"$ref\" ) ref : str pydantic-field required \u2693\ufe0e Response ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class Response ( BaseModel ): description : Optional [ str ] content : Optional [ Dict [ str , MediaType ]] = None content : Dict [ str , flask_openapi3 . models . common . MediaType ] pydantic-field \u2693\ufe0e description : str pydantic-field \u2693\ufe0e Schema ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/common.py class Schema ( BaseModel ): ref : Optional [ str ] = Field ( None , alias = \"$ref\" ) title : Optional [ str ] = None multipleOf : Optional [ float ] = None maximum : Optional [ float ] = None exclusiveMaximum : Optional [ float ] = None minimum : Optional [ float ] = None exclusiveMinimum : Optional [ float ] = None maxLength : Optional [ int ] = Field ( None , gte = 0 ) minLength : Optional [ int ] = Field ( None , gte = 0 ) pattern : Optional [ str ] = None maxItems : Optional [ int ] = Field ( None , gte = 0 ) minItems : Optional [ int ] = Field ( None , gte = 0 ) uniqueItems : Optional [ bool ] = None maxProperties : Optional [ int ] = Field ( None , gte = 0 ) minProperties : Optional [ int ] = Field ( None , gte = 0 ) required : Optional [ List [ str ]] = None enum : Optional [ List [ Any ]] = None type : Optional [ str ] = None allOf : Optional [ List [ Any ]] = None oneOf : Optional [ List [ Any ]] = None anyOf : Optional [ List [ Any ]] = None not_ : Optional [ Any ] = Field ( None , alias = \"not\" ) items : Optional [ Any ] = None properties : Optional [ Dict [ str , Any ]] = None additionalProperties : Optional [ Union [ Dict [ str , Any ], bool ]] = None description : Optional [ str ] = None format : Optional [ str ] = None default : Optional [ Any ] = None nullable : Optional [ bool ] = None readOnly : Optional [ bool ] = None writeOnly : Optional [ bool ] = None externalDocs : Optional [ ExternalDocumentation ] = None example : Optional [ Any ] = None deprecated : Optional [ bool ] = None additionalProperties : Union [ Dict [ str , Any ], bool ] pydantic-field \u2693\ufe0e allOf : List [ Any ] pydantic-field \u2693\ufe0e anyOf : List [ Any ] pydantic-field \u2693\ufe0e default : Any pydantic-field \u2693\ufe0e deprecated : bool pydantic-field \u2693\ufe0e description : str pydantic-field \u2693\ufe0e enum : List [ Any ] pydantic-field \u2693\ufe0e example : Any pydantic-field \u2693\ufe0e exclusiveMaximum : float pydantic-field \u2693\ufe0e exclusiveMinimum : float pydantic-field \u2693\ufe0e externalDocs : ExternalDocumentation pydantic-field \u2693\ufe0e format : str pydantic-field \u2693\ufe0e items : Any pydantic-field \u2693\ufe0e maxItems : int pydantic-field \u2693\ufe0e maxLength : int pydantic-field \u2693\ufe0e maxProperties : int pydantic-field \u2693\ufe0e maximum : float pydantic-field \u2693\ufe0e minItems : int pydantic-field \u2693\ufe0e minLength : int pydantic-field \u2693\ufe0e minProperties : int pydantic-field \u2693\ufe0e minimum : float pydantic-field \u2693\ufe0e multipleOf : float pydantic-field \u2693\ufe0e not_ : Any pydantic-field \u2693\ufe0e nullable : bool pydantic-field \u2693\ufe0e oneOf : List [ Any ] pydantic-field \u2693\ufe0e pattern : str pydantic-field \u2693\ufe0e properties : Dict [ str , Any ] pydantic-field \u2693\ufe0e readOnly : bool pydantic-field \u2693\ufe0e ref : str pydantic-field \u2693\ufe0e required : List [ str ] pydantic-field \u2693\ufe0e title : str pydantic-field \u2693\ufe0e type : str pydantic-field \u2693\ufe0e uniqueItems : bool pydantic-field \u2693\ufe0e writeOnly : bool pydantic-field \u2693\ufe0e","title":"common"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Encoding","text":"Source code in flask_openapi3/models/common.py class Encoding ( BaseModel ): contentType : Optional [ str ] = None # headers: Optional[Dict[str, Union[\"Header\", Reference]]] = None style : Optional [ str ] = None explode : Optional [ bool ] = True allowReserved : Optional [ bool ] = None","title":"Encoding"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Encoding.allowReserved","text":"","title":"allowReserved"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Encoding.contentType","text":"","title":"contentType"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Encoding.explode","text":"","title":"explode"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Encoding.style","text":"","title":"style"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.ExternalDocumentation","text":"Source code in flask_openapi3/models/common.py class ExternalDocumentation ( BaseModel ): url : str description : Optional [ str ] = None","title":"ExternalDocumentation"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.ExternalDocumentation.description","text":"","title":"description"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.ExternalDocumentation.url","text":"","title":"url"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.MediaType","text":"Source code in flask_openapi3/models/common.py class MediaType ( BaseModel ): schema_ : Optional [ Union [ Schema , Reference ]] = Field ( None , alias = \"schema\" ) encoding : Optional [ Dict [ str , Encoding ]] = None","title":"MediaType"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.MediaType.encoding","text":"","title":"encoding"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.MediaType.schema_","text":"","title":"schema_"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Reference","text":"Source code in flask_openapi3/models/common.py class Reference ( BaseModel ): ref : str = Field ( ... , alias = \"$ref\" )","title":"Reference"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Reference.ref","text":"","title":"ref"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Response","text":"Source code in flask_openapi3/models/common.py class Response ( BaseModel ): description : Optional [ str ] content : Optional [ Dict [ str , MediaType ]] = None","title":"Response"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Response.content","text":"","title":"content"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Response.description","text":"","title":"description"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema","text":"Source code in flask_openapi3/models/common.py class Schema ( BaseModel ): ref : Optional [ str ] = Field ( None , alias = \"$ref\" ) title : Optional [ str ] = None multipleOf : Optional [ float ] = None maximum : Optional [ float ] = None exclusiveMaximum : Optional [ float ] = None minimum : Optional [ float ] = None exclusiveMinimum : Optional [ float ] = None maxLength : Optional [ int ] = Field ( None , gte = 0 ) minLength : Optional [ int ] = Field ( None , gte = 0 ) pattern : Optional [ str ] = None maxItems : Optional [ int ] = Field ( None , gte = 0 ) minItems : Optional [ int ] = Field ( None , gte = 0 ) uniqueItems : Optional [ bool ] = None maxProperties : Optional [ int ] = Field ( None , gte = 0 ) minProperties : Optional [ int ] = Field ( None , gte = 0 ) required : Optional [ List [ str ]] = None enum : Optional [ List [ Any ]] = None type : Optional [ str ] = None allOf : Optional [ List [ Any ]] = None oneOf : Optional [ List [ Any ]] = None anyOf : Optional [ List [ Any ]] = None not_ : Optional [ Any ] = Field ( None , alias = \"not\" ) items : Optional [ Any ] = None properties : Optional [ Dict [ str , Any ]] = None additionalProperties : Optional [ Union [ Dict [ str , Any ], bool ]] = None description : Optional [ str ] = None format : Optional [ str ] = None default : Optional [ Any ] = None nullable : Optional [ bool ] = None readOnly : Optional [ bool ] = None writeOnly : Optional [ bool ] = None externalDocs : Optional [ ExternalDocumentation ] = None example : Optional [ Any ] = None deprecated : Optional [ bool ] = None","title":"Schema"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.additionalProperties","text":"","title":"additionalProperties"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.allOf","text":"","title":"allOf"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.anyOf","text":"","title":"anyOf"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.default","text":"","title":"default"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.deprecated","text":"","title":"deprecated"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.description","text":"","title":"description"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.enum","text":"","title":"enum"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.example","text":"","title":"example"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.exclusiveMaximum","text":"","title":"exclusiveMaximum"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.exclusiveMinimum","text":"","title":"exclusiveMinimum"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.externalDocs","text":"","title":"externalDocs"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.format","text":"","title":"format"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.items","text":"","title":"items"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.maxItems","text":"","title":"maxItems"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.maxLength","text":"","title":"maxLength"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.maxProperties","text":"","title":"maxProperties"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.maximum","text":"","title":"maximum"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.minItems","text":"","title":"minItems"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.minLength","text":"","title":"minLength"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.minProperties","text":"","title":"minProperties"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.minimum","text":"","title":"minimum"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.multipleOf","text":"","title":"multipleOf"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.not_","text":"","title":"not_"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.nullable","text":"","title":"nullable"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.oneOf","text":"","title":"oneOf"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.pattern","text":"","title":"pattern"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.properties","text":"","title":"properties"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.readOnly","text":"","title":"readOnly"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.ref","text":"","title":"ref"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.required","text":"","title":"required"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.title","text":"","title":"title"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.type","text":"","title":"type"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.uniqueItems","text":"","title":"uniqueItems"},{"location":"zh/Reference/Model/common/#flask_openapi3.models.common.Schema.writeOnly","text":"","title":"writeOnly"},{"location":"zh/Reference/Model/component/","text":"Components ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/component.py class Components ( BaseModel ): schemas : Optional [ Dict [ str , Union [ Schema , Reference ]]] = None securitySchemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None schemas : Dict [ str , Union [ flask_openapi3 . models . common . Schema , flask_openapi3 . models . common . Reference ]] pydantic-field \u2693\ufe0e securitySchemes : Dict [ str , Union [ flask_openapi3 . models . security . APIKey , flask_openapi3 . models . security . HTTPBase , flask_openapi3 . models . security . OAuth2 , flask_openapi3 . models . security . OpenIdConnect , flask_openapi3 . models . security . HTTPBearer , flask_openapi3 . models . common . Reference ]] pydantic-field \u2693\ufe0e","title":"component"},{"location":"zh/Reference/Model/component/#flask_openapi3.models.component.Components","text":"Source code in flask_openapi3/models/component.py class Components ( BaseModel ): schemas : Optional [ Dict [ str , Union [ Schema , Reference ]]] = None securitySchemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None","title":"Components"},{"location":"zh/Reference/Model/component/#flask_openapi3.models.component.Components.schemas","text":"","title":"schemas"},{"location":"zh/Reference/Model/component/#flask_openapi3.models.component.Components.securitySchemes","text":"","title":"securitySchemes"},{"location":"zh/Reference/Model/file/","text":"FileStorage ( FileStorage ) \u2693\ufe0e An uploaded file included as part of the request data. Source code in flask_openapi3/models/file.py class FileStorage ( _FileStorage ): \"\"\" An uploaded file included as part of the request data. \"\"\" @classmethod def __get_validators__ ( cls ) -> 'Callable[..., Any]' : # one or more validators may be yielded which will be called in the # order to validate the input, each validator will receive as an input # the value returned from the previous validator yield cls . validate @classmethod def __modify_schema__ ( cls , field_schema : Dict [ str , Any ]) -> None : field_schema . update ( format = \"binary\" , type = \"string\" ) @classmethod def validate ( cls , value : Any ) -> '_FileStorage' : if not isinstance ( value , _FileStorage ): raise TypeError ( 'werkzeug.datastructures.FileStorage required' ) return value __get_validators__ () classmethod special \u2693\ufe0e Source code in flask_openapi3/models/file.py @classmethod def __get_validators__ ( cls ) -> 'Callable[..., Any]' : # one or more validators may be yielded which will be called in the # order to validate the input, each validator will receive as an input # the value returned from the previous validator yield cls . validate __modify_schema__ ( field_schema ) classmethod special \u2693\ufe0e Source code in flask_openapi3/models/file.py @classmethod def __modify_schema__ ( cls , field_schema : Dict [ str , Any ]) -> None : field_schema . update ( format = \"binary\" , type = \"string\" ) validate ( value ) classmethod \u2693\ufe0e Source code in flask_openapi3/models/file.py @classmethod def validate ( cls , value : Any ) -> '_FileStorage' : if not isinstance ( value , _FileStorage ): raise TypeError ( 'werkzeug.datastructures.FileStorage required' ) return value","title":"file"},{"location":"zh/Reference/Model/file/#flask_openapi3.models.file.FileStorage","text":"An uploaded file included as part of the request data. Source code in flask_openapi3/models/file.py class FileStorage ( _FileStorage ): \"\"\" An uploaded file included as part of the request data. \"\"\" @classmethod def __get_validators__ ( cls ) -> 'Callable[..., Any]' : # one or more validators may be yielded which will be called in the # order to validate the input, each validator will receive as an input # the value returned from the previous validator yield cls . validate @classmethod def __modify_schema__ ( cls , field_schema : Dict [ str , Any ]) -> None : field_schema . update ( format = \"binary\" , type = \"string\" ) @classmethod def validate ( cls , value : Any ) -> '_FileStorage' : if not isinstance ( value , _FileStorage ): raise TypeError ( 'werkzeug.datastructures.FileStorage required' ) return value","title":"FileStorage"},{"location":"zh/Reference/Model/file/#flask_openapi3.models.file.FileStorage.__get_validators__","text":"Source code in flask_openapi3/models/file.py @classmethod def __get_validators__ ( cls ) -> 'Callable[..., Any]' : # one or more validators may be yielded which will be called in the # order to validate the input, each validator will receive as an input # the value returned from the previous validator yield cls . validate","title":"__get_validators__()"},{"location":"zh/Reference/Model/file/#flask_openapi3.models.file.FileStorage.__modify_schema__","text":"Source code in flask_openapi3/models/file.py @classmethod def __modify_schema__ ( cls , field_schema : Dict [ str , Any ]) -> None : field_schema . update ( format = \"binary\" , type = \"string\" )","title":"__modify_schema__()"},{"location":"zh/Reference/Model/file/#flask_openapi3.models.file.FileStorage.validate","text":"Source code in flask_openapi3/models/file.py @classmethod def validate ( cls , value : Any ) -> '_FileStorage' : if not isinstance ( value , _FileStorage ): raise TypeError ( 'werkzeug.datastructures.FileStorage required' ) return value","title":"validate()"},{"location":"zh/Reference/Model/oauth/","text":"OAuthConfig ( BaseModel ) pydantic-model \u2693\ufe0e More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md Source code in flask_openapi3/models/oauth.py class OAuthConfig ( BaseModel ): \"\"\" More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md \"\"\" clientId : Optional [ str ] = None clientSecret : Optional [ str ] = None realm : Optional [ str ] = None appName : Optional [ str ] = None scopeSeparator : Optional [ str ] = None scopes : Optional [ str ] = None additionalQueryStringParams : Optional [ Dict [ str , str ]] = None useBasicAuthenticationWithAccessCodeGrant : Optional [ bool ] = False usePkceWithAuthorizationCodeGrant : Optional [ bool ] = False additionalQueryStringParams : Dict [ str , str ] pydantic-field \u2693\ufe0e appName : str pydantic-field \u2693\ufe0e clientId : str pydantic-field \u2693\ufe0e clientSecret : str pydantic-field \u2693\ufe0e realm : str pydantic-field \u2693\ufe0e scopeSeparator : str pydantic-field \u2693\ufe0e scopes : str pydantic-field \u2693\ufe0e useBasicAuthenticationWithAccessCodeGrant : bool pydantic-field \u2693\ufe0e usePkceWithAuthorizationCodeGrant : bool pydantic-field \u2693\ufe0e","title":"oauth"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig","text":"More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md Source code in flask_openapi3/models/oauth.py class OAuthConfig ( BaseModel ): \"\"\" More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md \"\"\" clientId : Optional [ str ] = None clientSecret : Optional [ str ] = None realm : Optional [ str ] = None appName : Optional [ str ] = None scopeSeparator : Optional [ str ] = None scopes : Optional [ str ] = None additionalQueryStringParams : Optional [ Dict [ str , str ]] = None useBasicAuthenticationWithAccessCodeGrant : Optional [ bool ] = False usePkceWithAuthorizationCodeGrant : Optional [ bool ] = False","title":"OAuthConfig"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.additionalQueryStringParams","text":"","title":"additionalQueryStringParams"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.appName","text":"","title":"appName"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.clientId","text":"","title":"clientId"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.clientSecret","text":"","title":"clientSecret"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.realm","text":"","title":"realm"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.scopeSeparator","text":"","title":"scopeSeparator"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.scopes","text":"","title":"scopes"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.useBasicAuthenticationWithAccessCodeGrant","text":"","title":"useBasicAuthenticationWithAccessCodeGrant"},{"location":"zh/Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.usePkceWithAuthorizationCodeGrant","text":"","title":"usePkceWithAuthorizationCodeGrant"},{"location":"zh/Reference/Model/parameter/","text":"Parameter ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/parameter.py class Parameter ( BaseModel ): name : str in_ : ParameterInType = Field ( ... , alias = \"in\" ) # ... is REQUIRED description : Optional [ str ] = None required : Optional [ bool ] = None schema_ : Optional [ Union [ Schema , Reference ]] = Field ( None , alias = \"schema\" ) description : str pydantic-field \u2693\ufe0e in_ : ParameterInType pydantic-field required \u2693\ufe0e name : str pydantic-field required \u2693\ufe0e required : bool pydantic-field \u2693\ufe0e schema_ : Union [ flask_openapi3 . models . common . Schema , flask_openapi3 . models . common . Reference ] pydantic-field \u2693\ufe0e ParameterInType ( str , Enum ) \u2693\ufe0e An enumeration. Source code in flask_openapi3/models/parameter.py class ParameterInType ( str , Enum ): query = \"query\" header = \"header\" path = \"path\" cookie = \"cookie\" cookie \u2693\ufe0e header \u2693\ufe0e path \u2693\ufe0e query \u2693\ufe0e","title":"parameter"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter","text":"Source code in flask_openapi3/models/parameter.py class Parameter ( BaseModel ): name : str in_ : ParameterInType = Field ( ... , alias = \"in\" ) # ... is REQUIRED description : Optional [ str ] = None required : Optional [ bool ] = None schema_ : Optional [ Union [ Schema , Reference ]] = Field ( None , alias = \"schema\" )","title":"Parameter"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.description","text":"","title":"description"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.in_","text":"","title":"in_"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.name","text":"","title":"name"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.required","text":"","title":"required"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.schema_","text":"","title":"schema_"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType","text":"An enumeration. Source code in flask_openapi3/models/parameter.py class ParameterInType ( str , Enum ): query = \"query\" header = \"header\" path = \"path\" cookie = \"cookie\"","title":"ParameterInType"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.cookie","text":"","title":"cookie"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.header","text":"","title":"header"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.path","text":"","title":"path"},{"location":"zh/Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.query","text":"","title":"query"},{"location":"zh/Reference/Model/path/","text":"Operation ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/path.py class Operation ( BaseModel ): tags : Optional [ List [ str ]] = None summary : Optional [ str ] = None description : Optional [ str ] = None parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None requestBody : Optional [ Union [ RequestBody , Reference ]] = None responses : Dict [ str , Response ] = None security : Optional [ List [ Dict [ str , List [ str ]]]] = None deprecated : Optional [ bool ] = None operationId : Optional [ str ] = None deprecated : bool pydantic-field \u2693\ufe0e description : str pydantic-field \u2693\ufe0e operationId : str pydantic-field \u2693\ufe0e parameters : List [ Union [ flask_openapi3 . models . parameter . Parameter , flask_openapi3 . models . common . Reference ]] pydantic-field \u2693\ufe0e requestBody : Union [ flask_openapi3 . models . path . RequestBody , flask_openapi3 . models . common . Reference ] pydantic-field \u2693\ufe0e responses : Dict [ str , flask_openapi3 . models . common . Response ] pydantic-field \u2693\ufe0e security : List [ Dict [ str , List [ str ]]] pydantic-field \u2693\ufe0e summary : str pydantic-field \u2693\ufe0e tags : List [ str ] pydantic-field \u2693\ufe0e PathItem ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/path.py class PathItem ( BaseModel ): ref : Optional [ str ] = Field ( None , alias = \"$ref\" ) summary : Optional [ str ] = None description : Optional [ str ] = None get : Optional [ Operation ] = None put : Optional [ Operation ] = None post : Optional [ Operation ] = None delete : Optional [ Operation ] = None options : Optional [ Operation ] = None head : Optional [ Operation ] = None patch : Optional [ Operation ] = None trace : Optional [ Operation ] = None delete : Operation pydantic-field \u2693\ufe0e description : str pydantic-field \u2693\ufe0e get : Operation pydantic-field \u2693\ufe0e head : Operation pydantic-field \u2693\ufe0e options : Operation pydantic-field \u2693\ufe0e patch : Operation pydantic-field \u2693\ufe0e post : Operation pydantic-field \u2693\ufe0e put : Operation pydantic-field \u2693\ufe0e ref : str pydantic-field \u2693\ufe0e summary : str pydantic-field \u2693\ufe0e trace : Operation pydantic-field \u2693\ufe0e RequestBody ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/path.py class RequestBody ( BaseModel ): description : Optional [ str ] = None content : Dict [ str , MediaType ] required : Optional [ bool ] = Field ( default = True ) content : Dict [ str , flask_openapi3 . models . common . MediaType ] pydantic-field required \u2693\ufe0e description : str pydantic-field \u2693\ufe0e required : bool pydantic-field \u2693\ufe0e","title":"path"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation","text":"Source code in flask_openapi3/models/path.py class Operation ( BaseModel ): tags : Optional [ List [ str ]] = None summary : Optional [ str ] = None description : Optional [ str ] = None parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None requestBody : Optional [ Union [ RequestBody , Reference ]] = None responses : Dict [ str , Response ] = None security : Optional [ List [ Dict [ str , List [ str ]]]] = None deprecated : Optional [ bool ] = None operationId : Optional [ str ] = None","title":"Operation"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation.deprecated","text":"","title":"deprecated"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation.description","text":"","title":"description"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation.operationId","text":"","title":"operationId"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation.parameters","text":"","title":"parameters"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation.requestBody","text":"","title":"requestBody"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation.responses","text":"","title":"responses"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation.security","text":"","title":"security"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation.summary","text":"","title":"summary"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.Operation.tags","text":"","title":"tags"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem","text":"Source code in flask_openapi3/models/path.py class PathItem ( BaseModel ): ref : Optional [ str ] = Field ( None , alias = \"$ref\" ) summary : Optional [ str ] = None description : Optional [ str ] = None get : Optional [ Operation ] = None put : Optional [ Operation ] = None post : Optional [ Operation ] = None delete : Optional [ Operation ] = None options : Optional [ Operation ] = None head : Optional [ Operation ] = None patch : Optional [ Operation ] = None trace : Optional [ Operation ] = None","title":"PathItem"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.delete","text":"","title":"delete"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.description","text":"","title":"description"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.get","text":"","title":"get"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.head","text":"","title":"head"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.options","text":"","title":"options"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.patch","text":"","title":"patch"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.post","text":"","title":"post"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.put","text":"","title":"put"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.ref","text":"","title":"ref"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.summary","text":"","title":"summary"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.PathItem.trace","text":"","title":"trace"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.RequestBody","text":"Source code in flask_openapi3/models/path.py class RequestBody ( BaseModel ): description : Optional [ str ] = None content : Dict [ str , MediaType ] required : Optional [ bool ] = Field ( default = True )","title":"RequestBody"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.RequestBody.content","text":"","title":"content"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.RequestBody.description","text":"","title":"description"},{"location":"zh/Reference/Model/path/#flask_openapi3.models.path.RequestBody.required","text":"","title":"required"},{"location":"zh/Reference/Model/security/","text":"SecurityScheme \u2693\ufe0e APIKey ( SecurityBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class APIKey ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . apiKey , alias = \"type\" ) in_ : APIKeyIn = Field ( ... , alias = \"in\" ) name : str in_ : APIKeyIn pydantic-field required \u2693\ufe0e name : str pydantic-field required \u2693\ufe0e APIKeyIn ( str , Enum ) \u2693\ufe0e An enumeration. Source code in flask_openapi3/models/security.py class APIKeyIn ( str , Enum ): query = \"query\" header = \"header\" cookie = \"cookie\" cookie \u2693\ufe0e header \u2693\ufe0e query \u2693\ufe0e HTTPBase ( SecurityBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class HTTPBase ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . http , alias = \"type\" ) scheme : str scheme : str pydantic-field required \u2693\ufe0e HTTPBearer ( HTTPBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class HTTPBearer ( HTTPBase ): scheme = \"bearer\" bearerFormat : Optional [ str ] = None bearerFormat : str pydantic-field \u2693\ufe0e OAuth2 ( SecurityBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuth2 ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . oauth2 , alias = \"type\" ) flows : OAuthFlows flows : OAuthFlows pydantic-field required \u2693\ufe0e OAuthFlow ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlow ( BaseModel ): refreshUrl : Optional [ str ] = None scopes : Dict [ str , str ] = {} refreshUrl : str pydantic-field \u2693\ufe0e scopes : Dict [ str , str ] pydantic-field \u2693\ufe0e OAuthFlowAuthorizationCode ( OAuthFlow ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlowAuthorizationCode ( OAuthFlow ): authorizationUrl : str tokenUrl : str authorizationUrl : str pydantic-field required \u2693\ufe0e tokenUrl : str pydantic-field required \u2693\ufe0e OAuthFlowClientCredentials ( OAuthFlow ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlowClientCredentials ( OAuthFlow ): tokenUrl : str tokenUrl : str pydantic-field required \u2693\ufe0e OAuthFlowImplicit ( OAuthFlow ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlowImplicit ( OAuthFlow ): authorizationUrl : str authorizationUrl : str pydantic-field required \u2693\ufe0e OAuthFlowPassword ( OAuthFlow ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlowPassword ( OAuthFlow ): tokenUrl : str tokenUrl : str pydantic-field required \u2693\ufe0e OAuthFlows ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OAuthFlows ( BaseModel ): implicit : Optional [ OAuthFlowImplicit ] = None password : Optional [ OAuthFlowPassword ] = None clientCredentials : Optional [ OAuthFlowClientCredentials ] = None authorizationCode : Optional [ OAuthFlowAuthorizationCode ] = None authorizationCode : OAuthFlowAuthorizationCode pydantic-field \u2693\ufe0e clientCredentials : OAuthFlowClientCredentials pydantic-field \u2693\ufe0e implicit : OAuthFlowImplicit pydantic-field \u2693\ufe0e password : OAuthFlowPassword pydantic-field \u2693\ufe0e OpenIdConnect ( SecurityBase ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class OpenIdConnect ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . openIdConnect , alias = \"type\" ) openIdConnectUrl : str openIdConnectUrl : str pydantic-field required \u2693\ufe0e SecurityBase ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/security.py class SecurityBase ( BaseModel ): type_ : SecuritySchemeType = Field ( ... , alias = \"type\" ) description : Optional [ str ] = None description : str pydantic-field \u2693\ufe0e type_ : SecuritySchemeType pydantic-field required \u2693\ufe0e SecuritySchemeType ( str , Enum ) \u2693\ufe0e An enumeration. Source code in flask_openapi3/models/security.py class SecuritySchemeType ( str , Enum ): apiKey = \"apiKey\" http = \"http\" oauth2 = \"oauth2\" openIdConnect = \"openIdConnect\" apiKey \u2693\ufe0e http \u2693\ufe0e oauth2 \u2693\ufe0e openIdConnect \u2693\ufe0e","title":"security"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.SecurityScheme","text":"","title":"SecurityScheme"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.APIKey","text":"Source code in flask_openapi3/models/security.py class APIKey ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . apiKey , alias = \"type\" ) in_ : APIKeyIn = Field ( ... , alias = \"in\" ) name : str","title":"APIKey"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.APIKey.in_","text":"","title":"in_"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.APIKey.name","text":"","title":"name"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.APIKeyIn","text":"An enumeration. Source code in flask_openapi3/models/security.py class APIKeyIn ( str , Enum ): query = \"query\" header = \"header\" cookie = \"cookie\"","title":"APIKeyIn"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.APIKeyIn.cookie","text":"","title":"cookie"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.APIKeyIn.header","text":"","title":"header"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.APIKeyIn.query","text":"","title":"query"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.HTTPBase","text":"Source code in flask_openapi3/models/security.py class HTTPBase ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . http , alias = \"type\" ) scheme : str","title":"HTTPBase"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.HTTPBase.scheme","text":"","title":"scheme"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.HTTPBearer","text":"Source code in flask_openapi3/models/security.py class HTTPBearer ( HTTPBase ): scheme = \"bearer\" bearerFormat : Optional [ str ] = None","title":"HTTPBearer"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.HTTPBearer.bearerFormat","text":"","title":"bearerFormat"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuth2","text":"Source code in flask_openapi3/models/security.py class OAuth2 ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . oauth2 , alias = \"type\" ) flows : OAuthFlows","title":"OAuth2"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuth2.flows","text":"","title":"flows"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlow","text":"Source code in flask_openapi3/models/security.py class OAuthFlow ( BaseModel ): refreshUrl : Optional [ str ] = None scopes : Dict [ str , str ] = {}","title":"OAuthFlow"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlow.refreshUrl","text":"","title":"refreshUrl"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlow.scopes","text":"","title":"scopes"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlowAuthorizationCode","text":"Source code in flask_openapi3/models/security.py class OAuthFlowAuthorizationCode ( OAuthFlow ): authorizationUrl : str tokenUrl : str","title":"OAuthFlowAuthorizationCode"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlowAuthorizationCode.authorizationUrl","text":"","title":"authorizationUrl"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlowAuthorizationCode.tokenUrl","text":"","title":"tokenUrl"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlowClientCredentials","text":"Source code in flask_openapi3/models/security.py class OAuthFlowClientCredentials ( OAuthFlow ): tokenUrl : str","title":"OAuthFlowClientCredentials"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlowClientCredentials.tokenUrl","text":"","title":"tokenUrl"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlowImplicit","text":"Source code in flask_openapi3/models/security.py class OAuthFlowImplicit ( OAuthFlow ): authorizationUrl : str","title":"OAuthFlowImplicit"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlowImplicit.authorizationUrl","text":"","title":"authorizationUrl"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlowPassword","text":"Source code in flask_openapi3/models/security.py class OAuthFlowPassword ( OAuthFlow ): tokenUrl : str","title":"OAuthFlowPassword"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlowPassword.tokenUrl","text":"","title":"tokenUrl"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlows","text":"Source code in flask_openapi3/models/security.py class OAuthFlows ( BaseModel ): implicit : Optional [ OAuthFlowImplicit ] = None password : Optional [ OAuthFlowPassword ] = None clientCredentials : Optional [ OAuthFlowClientCredentials ] = None authorizationCode : Optional [ OAuthFlowAuthorizationCode ] = None","title":"OAuthFlows"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.authorizationCode","text":"","title":"authorizationCode"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.clientCredentials","text":"","title":"clientCredentials"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.implicit","text":"","title":"implicit"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.password","text":"","title":"password"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OpenIdConnect","text":"Source code in flask_openapi3/models/security.py class OpenIdConnect ( SecurityBase ): type_ = Field ( default = SecuritySchemeType . openIdConnect , alias = \"type\" ) openIdConnectUrl : str","title":"OpenIdConnect"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.OpenIdConnect.openIdConnectUrl","text":"","title":"openIdConnectUrl"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.SecurityBase","text":"Source code in flask_openapi3/models/security.py class SecurityBase ( BaseModel ): type_ : SecuritySchemeType = Field ( ... , alias = \"type\" ) description : Optional [ str ] = None","title":"SecurityBase"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.SecurityBase.description","text":"","title":"description"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.SecurityBase.type_","text":"","title":"type_"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType","text":"An enumeration. Source code in flask_openapi3/models/security.py class SecuritySchemeType ( str , Enum ): apiKey = \"apiKey\" http = \"http\" oauth2 = \"oauth2\" openIdConnect = \"openIdConnect\"","title":"SecuritySchemeType"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.apiKey","text":"","title":"apiKey"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.http","text":"","title":"http"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.oauth2","text":"","title":"oauth2"},{"location":"zh/Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.openIdConnect","text":"","title":"openIdConnect"},{"location":"zh/Reference/Model/tag/","text":"Tag ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/tag.py class Tag ( BaseModel ): name : str description : Optional [ str ] = None externalDocs : Optional [ ExternalDocumentation ] = None description : str pydantic-field \u2693\ufe0e externalDocs : ExternalDocumentation pydantic-field \u2693\ufe0e name : str pydantic-field required \u2693\ufe0e","title":"tag"},{"location":"zh/Reference/Model/tag/#flask_openapi3.models.tag.Tag","text":"Source code in flask_openapi3/models/tag.py class Tag ( BaseModel ): name : str description : Optional [ str ] = None externalDocs : Optional [ ExternalDocumentation ] = None","title":"Tag"},{"location":"zh/Reference/Model/tag/#flask_openapi3.models.tag.Tag.description","text":"","title":"description"},{"location":"zh/Reference/Model/tag/#flask_openapi3.models.tag.Tag.externalDocs","text":"","title":"externalDocs"},{"location":"zh/Reference/Model/tag/#flask_openapi3.models.tag.Tag.name","text":"","title":"name"},{"location":"zh/Reference/Model/validation_error/","text":"UnprocessableEntity ( BaseModel ) pydantic-model \u2693\ufe0e Source code in flask_openapi3/models/validation_error.py class UnprocessableEntity ( BaseModel ): loc : Optional [ List [ str ]] = Field ( None , title = \"Location\" ) msg : Optional [ str ] = Field ( None , title = \"Message\" ) type_ : Optional [ str ] = Field ( None , title = \"Error Type\" ) ctx : Optional [ Dict [ str , Any ]] = Field ( None , title = \"Error context\" ) ctx : Dict [ str , Any ] pydantic-field \u2693\ufe0e loc : List [ str ] pydantic-field \u2693\ufe0e msg : str pydantic-field \u2693\ufe0e type_ : str pydantic-field \u2693\ufe0e","title":"validation_error"},{"location":"zh/Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity","text":"Source code in flask_openapi3/models/validation_error.py class UnprocessableEntity ( BaseModel ): loc : Optional [ List [ str ]] = Field ( None , title = \"Location\" ) msg : Optional [ str ] = Field ( None , title = \"Message\" ) type_ : Optional [ str ] = Field ( None , title = \"Error Type\" ) ctx : Optional [ Dict [ str , Any ]] = Field ( None , title = \"Error context\" )","title":"UnprocessableEntity"},{"location":"zh/Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.ctx","text":"","title":"ctx"},{"location":"zh/Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.loc","text":"","title":"loc"},{"location":"zh/Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.msg","text":"","title":"msg"},{"location":"zh/Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.type_","text":"","title":"type_"}]}